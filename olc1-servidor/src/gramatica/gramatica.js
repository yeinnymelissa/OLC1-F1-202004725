/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,12],$V2=[1,13],$V3=[1,30],$V4=[1,31],$V5=[1,48],$V6=[1,49],$V7=[1,50],$V8=[1,51],$V9=[1,52],$Va=[1,34],$Vb=[1,46],$Vc=[1,35],$Vd=[1,47],$Ve=[1,36],$Vf=[1,32],$Vg=[1,33],$Vh=[1,38],$Vi=[1,37],$Vj=[1,40],$Vk=[1,39],$Vl=[1,44],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,45],$Vq=[2,5,16,17,36,37,42,43,44,45,46,53,54,58,59,61,63,65,66,77,78,98,99,100,103,104,105,106,107,117],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,91],$Vw=[1,108],$Vx=[1,105],$Vy=[1,106],$Vz=[1,107],$VA=[1,109],$VB=[1,110],$VC=[1,90],$VD=[1,89],$VE=[1,95],$VF=[1,96],$VG=[1,112],$VH=[1,113],$VI=[1,111],$VJ=[1,115],$VK=[1,114],$VL=[1,118],$VM=[37,38],$VN=[1,124],$VO=[8,34,41],$VP=[2,36],$VQ=[1,128],$VR=[8,56,64],$VS=[1,131],$VT=[1,148],$VU=[1,149],$VV=[1,150],$VW=[1,151],$VX=[1,152],$VY=[1,153],$VZ=[8,40,41,56,64,70,71,72,73,74,75,86,87,88,89,90,91,92,93,94],$V_=[1,170],$V$=[1,171],$V01=[1,172],$V11=[56,92,93,94],$V21=[1,174],$V31=[1,175],$V41=[1,176],$V51=[1,177],$V61=[1,178],$V71=[1,179],$V81=[2,5,16,17,36,37,42,43,44,45,46,53,54,57,58,59,61,63,65,66,77,78,98,99,100,103,104,105,106,107,117],$V91=[8,64],$Va1=[1,235],$Vb1=[41,56],$Vc1=[37,39,48,49,50,51,52,54,71,77,78,107,108,109,110,118,119],$Vd1=[1,251],$Ve1=[8,40,41,56,64,70,71,86,87,88,89,90,91,92,93,94],$Vf1=[8,40,41,56,64,70,71,72,73,74,86,87,88,89,90,91,92,93,94],$Vg1=[1,268],$Vh1=[8,56,92,93,94],$Vi1=[1,282],$Vj1=[1,283],$Vk1=[61,63,65],$Vl1=[1,314],$Vm1=[40,41],$Vn1=[1,323];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAWHILE":15,"BREAK":16,"CONTINUE":17,"INSTRUCCIONLLAMAR":18,"FUNCION":19,"METODO":20,"FUNCIONPRINTLN":21,"FUNCIONPRINT":22,"FUNCIONTYPEOF":23,"INSTRUCCIONRETURN":24,"VECTORES":25,"GRAFICARTS":26,"TERNARIO":27,"PUSHFUNCION":28,"POPFUNCION":29,"SPLICEFUNCION":30,"BLOQUE":31,"TIPODATO":32,"IDS":33,"igual":34,"EXPRESIONARITMETICA":35,"CONST":36,"id":37,"corcheteA":38,"entero":39,"corcheteC":40,"coma":41,"INT":42,"STRING":43,"BOOLEAN":44,"DOUBLE":45,"CHAR":46,"IGUALACIONDEDATO":47,"decimal":48,"cadena":49,"booleano":50,"caracter":51,"null":52,"IF":53,"parentesisA":54,"EXPRESIONLOGICA":55,"parentesisC":56,"ELSE":57,"SWITCH":58,"llaveA":59,"CASOS":60,"llaveC":61,"CASO":62,"CASE":63,"dosPuntos":64,"DEFAULT":65,"FOR":66,"VARIABLEFOR":67,"EXPRESIONESRELACIONALES":68,"INCREMENTODECREMENTOFOR":69,"SUMA":70,"RESTA":71,"MULTIPLICACION":72,"DIVISION":73,"MODULO":74,"POTENCIA":75,"EXPRESIONLLAMAR":76,"incremento":77,"decremento":78,"ROUNDEXP":79,"TOLOWEREXP":80,"TOUPPEREXP":81,"ACCESOVEC":82,"TOCHARARRAYEXP":83,"INDEXOFEXP":84,"LENGTHEXP":85,"mayorQue":86,"mayorIgual":87,"menorQue":88,"menorIgual":89,"igualDoble":90,"diferenteDe":91,"OR":92,"AND":93,"XOR":94,"NOT":95,"FORINCREMENTODECREMENTO":96,"SUMARESTA":97,"WHILE":98,"DO":99,"VOID":100,"PARAMETROS":101,"PARAMETROSCALL":102,"CALL":103,"RETORNO":104,"PRINTLN":105,"PRINT":106,"TYPEOF":107,"TOLOWER":108,"TOUPPER":109,"ROUND":110,"NEW":111,"COMASVEC":112,"COMASMATRIZ":113,"interrogacionCierra":114,"INSTRUCCIONTERNARIO":115,"TERNARIOEXP":116,"GRAFICAR":117,"LENGTH":118,"TOCHARARRAY":119,"punto":120,"INDEXOF":121,"PUSH":122,"POP":123,"SPLICE":124,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",16:"BREAK",17:"CONTINUE",34:"igual",36:"CONST",37:"id",38:"corcheteA",39:"entero",40:"corcheteC",41:"coma",42:"INT",43:"STRING",44:"BOOLEAN",45:"DOUBLE",46:"CHAR",48:"decimal",49:"cadena",50:"booleano",51:"caracter",52:"null",53:"IF",54:"parentesisA",56:"parentesisC",57:"ELSE",58:"SWITCH",59:"llaveA",61:"llaveC",63:"CASE",64:"dosPuntos",65:"DEFAULT",66:"FOR",70:"SUMA",71:"RESTA",72:"MULTIPLICACION",73:"DIVISION",74:"MODULO",75:"POTENCIA",77:"incremento",78:"decremento",86:"mayorQue",87:"mayorIgual",88:"menorQue",89:"menorIgual",90:"igualDoble",91:"diferenteDe",92:"OR",93:"AND",94:"XOR",95:"NOT",98:"WHILE",99:"DO",100:"VOID",103:"CALL",104:"RETORNO",105:"PRINTLN",106:"PRINT",107:"TYPEOF",108:"TOLOWER",109:"TOUPPER",110:"ROUND",111:"NEW",114:"interrogacionCierra",117:"GRAFICAR",118:"LENGTH",119:"TOCHARARRAY",120:"punto",121:"INDEXOF",122:"PUSH",123:"POP",124:"SPLICE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[7,4],[7,5],[7,2],[9,3],[9,6],[9,9],[33,3],[33,1],[32,1],[32,1],[32,1],[32,1],[32,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[11,7],[11,5],[12,7],[60,2],[60,1],[62,4],[62,3],[13,8],[67,2],[67,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,1],[35,1],[35,1],[35,1],[35,2],[35,2],[35,2],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,1],[55,3],[55,3],[55,3],[55,2],[55,1],[69,1],[69,1],[10,2],[10,2],[10,2],[10,2],[96,3],[97,3],[97,3],[97,1],[97,1],[15,5],[14,7],[20,6],[20,5],[101,3],[101,1],[19,6],[19,5],[102,3],[102,1],[18,5],[18,4],[76,4],[76,3],[24,1],[24,2],[21,4],[22,4],[23,4],[31,3],[31,2],[80,4],[81,4],[79,4],[25,10],[25,8],[25,15],[25,10],[112,3],[112,1],[113,5],[113,3],[82,4],[82,7],[27,8],[116,8],[115,1],[115,1],[115,1],[115,1],[115,1],[26,4],[85,4],[83,4],[84,6],[28,6],[29,7],[30,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 14: case 17: case 18: case 20:
 this.$=$$[$0-1]; 
break;
case 12:
this.$= new Break( _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 13:
this.$= new Continue( _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 15: case 16: case 27:
 this.$=$$[$0]; 
break;
case 28:
 
                var consola = Singleton.getInstance(); 
                const error = new Errores(yylloc.first_line , yylloc.first_column,`El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`,"Sint√°ctico");
                consola.add_errores(error);
                console.log("Error sintactico en la linea"+(yylineno+1));
                 
break;
case 29:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 30:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column );
break;
case 31:
this.$= new Declaracion($$[$0],$$[$0-1],null,false,_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 32:
this.$= new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column );
break;
case 35: case 109: case 113:
 $$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 36: case 110: case 114: case 134:
this.$ = [$$[$0]]
break;
case 37:
this.$=Tipo.INT;
break;
case 38:
this.$=Tipo.STRING;
break;
case 39:
this.$=Tipo.BOOLEAN;
break;
case 40:
this.$=Tipo.DOUBLE;
break;
case 41:
this.$=Tipo.CHAR;
break;
case 42:
this.$=new Literal($$[$0],Tipo.DOUBLE , _$[$0].first_line, _$[$0].first_column); console.log("pase por aca decimal");
break;
case 43:
this.$=new Literal($$[$0],Tipo.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 44:
this.$=new Literal($$[$0],Tipo.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 45:
this.$=new Literal($$[$0],Tipo.INT , _$[$0].first_line, _$[$0].first_column); console.log("pase por aca");
break;
case 46:
this.$=new Literal($$[$0],Tipo.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 47:
this.$=new Literal($$[$0],Tipo.NULL , _$[$0].first_line, _$[$0].first_column)
break;
case 48:
this.$=new If($$[$0-4],$$[$0-2],$$[$0] , _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 49:
this.$=new If($$[$0-2],$$[$0],null, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 55:
this.$= new For($$[$0-5],$$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 56: case 57: case 65:
this.$=$$[$0-1];
break;
case 58: case 101:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 59: case 102:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$= new Aritmeticas(null,$$[$0],opcionesAritmeticas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 67: case 74: case 75: case 76: case 88: case 93: case 94: case 95: case 100: case 103: case 104:
this.$=$$[$0];
break;
case 70:
this.$= new IncrementoEx($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 71:
this.$= new DecrementoEx($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 72:
this.$= new IncrementoEx($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
this.$= new DecrementoEx($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 82:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$= new Logicas(null,$$[$0],opcionesLogicas.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$= new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$= new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 98:
this.$= new Incremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 99:
this.$= new Decremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
this.$= new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 107:
this.$= new InsFuncion($$[$0-4],$$[$0],$$[$0-2], Tipo.VOID, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 108:
this.$= new InsFuncion($$[$0-3],$$[$0],[], Tipo.VOID, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 111:
this.$= new InsFuncion($$[$0-4],$$[$0],$$[$0-2], $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 112:
this.$= new InsFuncion($$[$0-3],$$[$0],[],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 117:
this.$= new Llamada($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 118:
this.$= new Llamada($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$= new Return(null, _$[$0].first_line, _$[$0].first_column);
break;
case 120:
this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 121:
this.$= new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 122:
this.$= new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 123:
this.$= new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 124:
this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 125:
this.$= new Bloque([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 126:
this.$= new toLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 127:
this.$= new toUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 128:
this.$= new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 133:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 135:
 $$[$0-4].push($$[$0-1]);this.$=$$[$0-4];
break;
case 136:
this.$ = [$$[$0-1]]
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},{1:[3]},{2:$V0,5:[1,53],6:54,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},o($Vq,[2,3]),{8:[1,55]},{8:[1,56]},{8:[1,57]},o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),{8:[1,58]},{8:[1,59]},{8:[1,60]},o($Vq,[2,15]),o($Vq,[2,16]),{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},o($Vq,[2,22]),o($Vq,[2,23]),{8:[1,66]},o($Vq,[2,25]),o($Vq,[2,26]),o($Vq,[2,27]),{8:[1,67]},{33:68,37:[1,69]},{32:70,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9},{34:$Vr,38:$Vs,77:$Vt,78:$Vu,120:[1,75]},{37:[1,76]},{37:[1,77]},{54:[1,78]},{54:[1,79]},{54:[1,80]},{31:81,59:$Vd},{54:[1,82]},{37:[1,83]},{37:[1,84]},{54:[1,85]},{54:[1,86]},{54:[1,87]},{8:[2,119],23:94,28:104,35:88,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{54:[1,116]},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:117,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{2:$V0,4:121,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,61:[1,122],66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},o($VM,[2,37]),o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,[2,24]),o($Vq,[2,28]),{8:[2,31],34:[1,123],41:$VN},o($VO,$VP,{38:[1,126],54:[1,125]}),{33:127,37:$VQ},{23:94,28:104,35:129,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{39:[1,130]},o($VR,[2,96]),o($VR,[2,97]),{122:$VS,123:[1,132],124:[1,133]},o($VR,[2,98]),o($VR,[2,99]),{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:134,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{37:[1,135]},{7:137,9:138,32:139,36:$V3,37:[1,140],42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,67:136},{98:[1,141]},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:142,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{54:[1,143]},{54:[1,144]},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:145,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:146,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:147,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{8:[2,120],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{23:94,28:104,35:154,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:155,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($VZ,[2,66],{38:[1,159],54:[1,158],77:[1,156],78:[1,157],120:[1,160]}),o($VZ,[2,67]),o($VZ,[2,68]),o($VZ,[2,69]),{37:[1,161]},{37:[1,162]},o($VZ,[2,74]),o($VZ,[2,75]),o($VZ,[2,76]),o($VZ,[2,77]),o($VZ,[2,78]),o($VZ,[2,79]),o($VZ,[2,80]),o($VZ,[2,81]),o($VZ,[2,42]),o($VZ,[2,43]),o($VZ,[2,44]),o($VZ,[2,45]),o($VZ,[2,46]),o($VZ,[2,47]),{54:[1,163]},{54:[1,164]},{54:[1,165]},{54:[1,166]},{54:[1,167]},{56:[1,168]},{56:[1,169],92:$V_,93:$V$,94:$V01},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:173,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($V11,[2,93],{86:$V21,87:$V31,88:$V41,89:$V51,90:$V61,91:$V71}),o([8,56,86,87,88,89,90,91,92,93,94],[2,88],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{2:$V0,6:54,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,61:[1,180],66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},o($V81,[2,125]),{23:94,28:104,35:181,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{37:[1,182]},{23:94,28:104,35:185,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,56:[1,184],71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,101:183,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{40:[1,186]},{34:[1,187],41:$VN},o($VO,$VP),o($V91,[2,32],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{40:[1,188]},{54:[1,189]},{54:[1,190]},{54:[1,191]},{56:[1,192],92:$V_,93:$V$,94:$V01},{56:[1,193]},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:194,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{8:[1,195]},{8:[1,196]},{33:68,37:$VQ},{34:$Vr,38:$Vs},{54:[1,197]},{56:[1,198],92:$V_,93:$V$,94:$V01},{23:94,28:104,35:201,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,56:[1,200],71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,102:199,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:185,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,56:[1,203],71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,101:202,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{56:[1,204],92:$V_,93:$V$,94:$V01},{56:[1,205],92:$V_,93:$V$,94:$V01},{56:[1,206],92:$V_,93:$V$,94:$V01},{23:94,28:104,35:207,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:208,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:209,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:210,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:211,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:212,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($VZ,[2,64]),{56:[1,213],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},o($VZ,[2,70]),o($VZ,[2,71]),{23:94,28:104,35:201,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,56:[1,215],71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,102:214,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{39:[1,216]},{121:[1,217],122:$VS},o($VZ,[2,72]),o($VZ,[2,73]),{23:94,28:104,35:218,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:219,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:220,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:221,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:222,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{8:[1,223]},{114:[1,224]},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:225,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:226,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:227,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($V11,[2,92]),{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:228,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:229,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:230,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:231,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:232,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,68:233,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($V81,[2,124]),{8:[2,29],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},o($VO,[2,35]),{41:$Va1,56:[1,234]},{31:236,59:$Vd},o($Vb1,[2,110],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{34:[1,237],38:[1,238]},{23:94,28:104,35:239,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{34:[1,240],38:[1,241]},{23:94,28:104,35:242,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{23:94,28:104,35:243,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{39:[1,244]},{31:245,59:$Vd},{59:[1,246]},{8:[1,247],86:$V21,87:$V31,88:$V41,89:$V51,90:$V61,91:$V71},o($Vc1,[2,56]),o($Vc1,[2,57]),{23:94,28:104,35:120,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,55:248,68:119,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,95:$VL,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{31:249,59:$Vd},{41:$Vd1,56:[1,250]},o($V91,[2,116]),o($Vb1,[2,114],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{41:$Va1,56:[1,252]},{31:253,59:$Vd},o($V91,[2,121]),o($V91,[2,122]),o($VZ,[2,123]),o($Ve1,[2,58],{72:$VV,73:$VW,74:$VX,75:$VY}),o($Ve1,[2,59],{72:$VV,73:$VW,74:$VX,75:$VY}),o($Vf1,[2,60],{75:$VY}),o($Vf1,[2,61],{75:$VY}),o($Vf1,[2,62],{75:$VY}),o($VZ,[2,63]),o($VZ,[2,65]),{41:$Vd1,56:[1,254]},o($VZ,[2,118]),{40:[1,255]},{54:[1,256]},{56:[1,257],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{56:[1,258],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{56:[1,259],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{56:[1,260],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{56:[1,261],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},o($Vq,[2,146]),{9:265,10:266,18:267,21:264,22:263,37:$Vg1,77:$Vf,78:$Vg,103:$Vk,105:$Vm,106:$Vn,115:262},o([56,92],[2,89],{93:$V$,94:$V01}),o([56,92,93],[2,90],{94:$V01}),o($V11,[2,91]),o($Vh1,[2,82]),o($Vh1,[2,83]),o($Vh1,[2,84]),o($Vh1,[2,85]),o($Vh1,[2,86]),o($Vh1,[2,87]),{31:269,59:$Vd},{23:94,28:104,35:270,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($Vq,[2,112]),{38:[1,272],111:[1,271]},{40:[1,273]},{8:[2,30],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{23:94,28:104,35:274,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{39:[1,275]},{56:[1,276],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{56:[1,277],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{41:[1,278]},o($Vq,[2,49],{57:[1,279]}),{60:280,62:281,63:$Vi1,65:$Vj1},{10:285,37:[1,287],69:284,77:$Vf,78:$Vg,96:286},{56:[1,288],92:$V_,93:$V$,94:$V01},o($Vq,[2,105]),o($V91,[2,115]),{23:94,28:104,35:289,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{31:290,59:$Vd},o($Vq,[2,108]),o($VZ,[2,117]),o($VZ,[2,137],{38:[1,291]}),{23:94,28:104,35:292,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},o($VZ,[2,128]),o($VZ,[2,126]),o($VZ,[2,127]),o($VZ,[2,148]),o($VZ,[2,147]),{64:[1,293]},o($V91,[2,141]),o($V91,[2,142]),o($V91,[2,143]),o($V91,[2,144]),o($V91,[2,145]),{34:$Vr,38:$Vs,77:$Vt,78:$Vu},o($Vq,[2,111]),o($Vb1,[2,109],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{32:294,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9},{23:94,28:104,35:296,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,112:295,118:$VJ,119:$VK},{34:[1,297]},o($V91,[2,33],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{40:[1,298]},o($VZ,[2,150]),{8:[1,299]},{23:94,28:104,35:300,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{31:301,59:$Vd},{61:[1,302],62:303,63:$Vi1,65:$Vj1},o($Vk1,[2,52]),{39:$Vw,47:304,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB},{64:[1,305]},{56:[1,306]},{56:[2,94]},{56:[2,95]},{34:[1,307],77:$Vt,78:$Vu},{31:308,59:$Vd},o($Vb1,[2,113],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),o($Vq,[2,107]),{39:[1,309]},{56:[1,310],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},{9:265,10:266,18:267,21:264,22:263,37:$Vg1,77:$Vf,78:$Vg,103:$Vk,105:$Vm,106:$Vn,115:311},{38:[1,312]},{40:[1,313],41:$Vl1},o($Vm1,[2,134],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{38:[1,316],111:[1,315]},{34:[1,317]},o($Vq,[2,151]),{56:[1,318],70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY},o($Vq,[2,48]),o($Vq,[2,50]),o($Vk1,[2,51]),{64:[1,319]},{2:$V0,4:320,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},{31:321,59:$Vd},{37:$Vn1,39:$Vw,47:324,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,97:322},o($Vq,[2,106]),{40:[1,325]},o($VZ,[2,149]),{8:[1,326]},{39:[1,327]},{8:[2,130]},{23:94,28:104,35:328,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{32:329,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9},{38:[1,331],113:330},{23:94,28:104,35:332,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,118:$VJ,119:$VK},{8:[1,333]},{2:$V0,4:334,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp},o($Vk1,[2,54],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,6:54,2:$V0,16:$V1,17:$V2,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp}),o($Vq,[2,55]),{56:[2,100]},{56:[2,103],70:[1,335],71:[1,336]},{56:[2,104]},o($VZ,[2,138]),o($Vq,[2,139]),{40:[1,337]},o($Vm1,[2,133],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),{38:[1,338]},{40:[1,339],41:[1,340]},{23:94,28:104,35:296,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,112:341,118:$VJ,119:$VK},o($V91,[2,34],{70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY}),o($Vq,[2,152]),o($Vk1,[2,53],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:29,6:54,2:$V0,16:$V1,17:$V2,36:$V3,37:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,53:$Va,54:$Vb,58:$Vc,59:$Vd,66:$Ve,77:$Vf,78:$Vg,98:$Vh,99:$Vi,100:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$Vo,117:$Vp}),{37:$Vn1,39:$Vw,47:324,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,97:342},{37:$Vn1,39:$Vw,47:324,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,97:343},{8:[2,129]},{39:[1,344]},{8:[2,132]},{38:[1,345]},{40:[1,346],41:$Vl1},{56:[2,101]},{56:[2,102]},{40:[1,347]},{23:94,28:104,35:296,37:$Vv,39:$Vw,47:92,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,54:$VC,71:$VD,76:93,77:$VE,78:$VF,79:97,80:98,81:99,82:100,83:101,84:102,85:103,107:$Vo,108:$VG,109:$VH,110:$VI,112:348,118:$VJ,119:$VK},o($Vm1,[2,136]),{38:[1,349]},{40:[1,350],41:$Vl1},{39:[1,351]},o($Vm1,[2,135]),{40:[1,352]},{8:[2,131]}],
defaultActions: {53:[2,1],285:[2,94],286:[2,95],313:[2,130],322:[2,100],324:[2,104],337:[2,129],339:[2,132],342:[2,101],343:[2,102],352:[2,131]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Declaracion} = require('../instrucciones/declaracion')
    const {Literal} = require('../expresiones/literal')
    const {Tipo} = require('../simbolos/tipo');
    const {Aritmeticas} = require('../expresiones/aritmeticas');
    const {opcionesAritmeticas} = require('../expresiones/opcionesAritmeticas');
    const {Logicas} = require('../expresiones/logicas');
    const {opcionesLogicas} = require('../expresiones/opcionesLogicas');
    const {Relacional} = require('../expresiones/relacional');
    const {opcionesRelacionales} = require('../expresiones/opcionesRelacionales');
    const {Acceso} = require('../expresiones/acceso');
    const {Asignar} = require('../instrucciones/asignar');
    const {Print} = require('../instrucciones/Reservadas/print');
    const {Println} = require('../instrucciones/Reservadas/println');
    const {Bloque} = require('../instrucciones/bloque');
    const {Errores} = require('../errores/errores');
    const {Singleton} = require('../patronSingleton/singleton');
    const {DecrementoEx} = require('../expresiones/Aritmeticas/decrementoEx');
    const {IncrementoEx} = require('../expresiones/Aritmeticas/incrementoEx');
    const {Round} = require('../expresiones/Reservadas/round');
    const {toLower} = require('../expresiones/Reservadas/toLower');
    const {TypeOf} = require('../expresiones/Reservadas/typeOf');
    //Segunda tanda
    const {Llamada} = require('../expresiones/call');
    const {For} = require('../instrucciones/Ciclicas/for');
    const {While} = require('../instrucciones/Ciclicas/while');
    const {If} = require('../instrucciones/control/if');
    const {Decremento} = require('../instrucciones/IncDec/decremento');
    const {Incremento} = require('../instrucciones/IncDec/incremento');
    const {Break} = require('../instrucciones/Transicion/break');
    const {Continue} = require('../instrucciones/Transicion/continue');
    const {Return} = require('../instrucciones/Transicion/return');
    const {InsFuncion} = require('../instrucciones/funcion');

    var cadena = '';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 49; 
break;
case 10:
break;
case 11:console.log("Comentario una l√≠nea");
break;
case 12:console.log("Comentario multi");
break;
case 13:return 51
break;
case 14: return 48; 
break;
case 15: return 39; 
break;
case 16: return 50; 
break;
case 17: return 42; 
break;
case 18: return 43; 
break;
case 19: return 44; 
break;
case 20: return 45; 
break;
case 21: return 46; 
break;
case 22: return 36; 
break;
case 23: return 53; 
break;
case 24: return 57; 
break;
case 25: return 58; 
break;
case 26: return 63; 
break;
case 27: return 65; 
break;
case 28: return 16; 
break;
case 29: return 66; 
break;
case 30: return 99; 
break;
case 31: return 98; 
break;
case 32: return 17; 
break;
case 33: return 100; 
break;
case 34: return 103; 
break;
case 35: return 52; 
break;
case 36: return 104; 
break;
case 37: return 105; 
break;
case 38: return 106; 
break;
case 39: return 107; 
break;
case 40: return 108; 
break;
case 41: return 109; 
break;
case 42: return 110; 
break;
case 43: return 111; 
break;
case 44: return 118; 
break;
case 45: return 119; 
break;
case 46: return 121; 
break;
case 47: return 122; 
break;
case 48: return 123; 
break;
case 49: return 124; 
break;
case 50: return 117; 
break;
case 51: return 37; 
break;
case 52: return 120 
break;
case 53: return 90 
break;
case 54: return 34 
break;
case 55: return 91 
break;
case 56: return 89 
break;
case 57: return 87 
break;
case 58: return 88 
break;
case 59: return 86 
break;
case 60: return 114 
break;
case 61: return 64 
break;
case 62: return 95 
break;
case 63: return 92 
break;
case 64: return 93 
break;
case 65: return 94 
break;
case 66: return 54 
break;
case 67: return 56 
break;
case 68: return 8 
break;
case 69: return 41 
break;
case 70: return 77 
break;
case 71: return 78 
break;
case 72: return 70 
break;
case 73: return 71 
break;
case 74: return 73 
break;
case 75: return 75 
break;
case 76: return 72 
break;
case 77: return 74 
break;
case 78: return 59 
break;
case 79: return 61 
break;
case 80: return 38 
break;
case 81: return 40 
break;
case 82:
break;
case 83:
break;
case 84:return 5;
break;
case 85:
                                        var consola = Singleton.getInstance(); 
                                        const error = new Errores(yy_.yylloc.first_line , yy_.yylloc.first_column,"El caracter "+ yy_.yytext+ "no se reconoce en el lenguaje.","L√©xico");
                                        consola.add_errores(error);
                                        console.log("ERROR LEXICO EN LA LINEA "+ yy_.yylloc.first_line + "Y EN LA COLUMNA "+yy_.yylloc.first_column + " EL TEXTO ES "+ yy_.yytext);
                                    
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:length\b)/i,/^(?:toCharArray\b)/i,/^(?:indexOf\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}