/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,30],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,14],$V5=[1,15],$V6=[1,32],$V7=[1,47],$V8=[1,48],$V9=[1,49],$Va=[1,50],$Vb=[1,51],$Vc=[1,33],$Vd=[1,45],$Ve=[1,34],$Vf=[1,46],$Vg=[1,35],$Vh=[1,37],$Vi=[1,36],$Vj=[1,39],$Vk=[1,38],$Vl=[1,43],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,44],$Vq=[2,5,10,11,12,18,19,38,43,44,45,46,47,54,55,59,60,62,64,66,67,100,101,102,105,106,107,108,109,118],$Vr=[1,58],$Vs=[1,59],$Vt=[1,102],$Vu=[1,88],$Vv=[1,92],$Vw=[1,93],$Vx=[1,106],$Vy=[1,103],$Vz=[1,104],$VA=[1,105],$VB=[1,107],$VC=[1,108],$VD=[1,97],$VE=[1,87],$VF=[1,110],$VG=[1,111],$VH=[1,109],$VI=[1,113],$VJ=[1,112],$VK=[1,116],$VL=[10,39],$VM=[1,131],$VN=[8,36,42],$VO=[2,39],$VP=[1,135],$VQ=[1,151],$VR=[1,152],$VS=[1,153],$VT=[1,154],$VU=[1,155],$VV=[1,156],$VW=[8,41,42,57,65,71,72,73,74,75,76,88,89,90,91,92,93,94,95,96],$VX=[1,174],$VY=[1,175],$VZ=[1,176],$V_=[57,94,95,96],$V$=[1,178],$V01=[1,179],$V11=[1,180],$V21=[1,181],$V31=[1,182],$V41=[1,183],$V51=[2,5,10,11,12,18,19,38,43,44,45,46,47,54,55,58,59,60,62,64,66,67,100,101,102,105,106,107,108,109,118],$V61=[8,65],$V71=[1,245],$V81=[2,10,11,12,40,49,50,51,52,53,55,72,109,110,111,112,119,120],$V91=[1,257],$Va1=[42,57],$Vb1=[8,41,42,57,65,71,72,88,89,90,91,92,93,94,95,96],$Vc1=[8,41,42,57,65,71,72,73,74,75,88,89,90,91,92,93,94,95,96],$Vd1=[1,273],$Ve1=[1,274],$Vf1=[1,275],$Vg1=[8,57,94,95,96],$Vh1=[1,291],$Vi1=[1,292],$Vj1=[62,64,66],$Vk1=[1,337],$Vl1=[41,42],$Vm1=[1,344];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"id":10,"incremento":11,"decremento":12,"SENTENCIAIF":13,"SENTENCIASWITCH":14,"SENTENCIAFOR":15,"SENTENCIADOWHILE":16,"SENTENCIAWHILE":17,"BREAK":18,"CONTINUE":19,"INSTRUCCIONLLAMAR":20,"FUNCION":21,"METODO":22,"FUNCIONPRINTLN":23,"FUNCIONPRINT":24,"FUNCIONTYPEOF":25,"INSTRUCCIONRETURN":26,"VECTORES":27,"GRAFICARTS":28,"TERNARIO":29,"PUSHFUNCION":30,"POPFUNCION":31,"SPLICEFUNCION":32,"BLOQUE":33,"TIPODATO":34,"IDS":35,"igual":36,"EXPRESIONARITMETICA":37,"CONST":38,"corcheteA":39,"entero":40,"corcheteC":41,"coma":42,"INT":43,"STRING":44,"BOOLEAN":45,"DOUBLE":46,"CHAR":47,"IGUALACIONDEDATO":48,"decimal":49,"cadena":50,"booleano":51,"caracter":52,"null":53,"IF":54,"parentesisA":55,"EXPRESIONLOGICA":56,"parentesisC":57,"ELSE":58,"SWITCH":59,"llaveA":60,"CASOS":61,"llaveC":62,"CASO":63,"CASE":64,"dosPuntos":65,"DEFAULT":66,"FOR":67,"VARIABLEFOR":68,"EXPRESIONESRELACIONALES":69,"INCREMENTODECREMENTOFOR":70,"SUMA":71,"RESTA":72,"MULTIPLICACION":73,"DIVISION":74,"MODULO":75,"POTENCIA":76,"EXPRESIONLLAMAR":77,"ROUNDEXP":78,"TOLOWEREXP":79,"TOUPPEREXP":80,"ACCESOVEC":81,"TOCHARARRAYEXP":82,"INDEXOFEXP":83,"LENGTHEXP":84,"punto":85,"PUSH":86,"PARENTESISPRUEBA":87,"mayorQue":88,"mayorIgual":89,"menorQue":90,"menorIgual":91,"igualDoble":92,"diferenteDe":93,"OR":94,"AND":95,"XOR":96,"NOT":97,"FORINCREMENTODECREMENTO":98,"SUMARESTA":99,"WHILE":100,"DO":101,"VOID":102,"PARAMETROS":103,"PARAMETROSCALL":104,"CALL":105,"RETORNO":106,"PRINTLN":107,"PRINT":108,"TYPEOF":109,"TOLOWER":110,"TOUPPER":111,"ROUND":112,"NEW":113,"COMASVEC":114,"COMASMATRIZ":115,"interrogacionCierra":116,"INSTRUCCIONTERNARIO":117,"GRAFICAR":118,"LENGTH":119,"TOCHARARRAY":120,"INDEXOF":121,"POP":122,"SPLICE":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",10:"id",11:"incremento",12:"decremento",18:"BREAK",19:"CONTINUE",36:"igual",38:"CONST",39:"corcheteA",40:"entero",41:"corcheteC",42:"coma",43:"INT",44:"STRING",45:"BOOLEAN",46:"DOUBLE",47:"CHAR",49:"decimal",50:"cadena",51:"booleano",52:"caracter",53:"null",54:"IF",55:"parentesisA",57:"parentesisC",58:"ELSE",59:"SWITCH",60:"llaveA",62:"llaveC",64:"CASE",65:"dosPuntos",66:"DEFAULT",67:"FOR",71:"SUMA",72:"RESTA",73:"MULTIPLICACION",74:"DIVISION",75:"MODULO",76:"POTENCIA",85:"punto",86:"PUSH",88:"mayorQue",89:"mayorIgual",90:"menorQue",91:"menorIgual",92:"igualDoble",93:"diferenteDe",94:"OR",95:"AND",96:"XOR",97:"NOT",100:"WHILE",101:"DO",102:"VOID",105:"CALL",106:"RETORNO",107:"PRINTLN",108:"PRINT",109:"TYPEOF",110:"TOLOWER",111:"TOUPPER",112:"ROUND",113:"NEW",116:"interrogacionCierra",118:"GRAFICAR",119:"LENGTH",120:"TOCHARARRAY",121:"INDEXOF",122:"POP",123:"SPLICE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,3],[6,3],[6,3],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[7,4],[7,5],[7,2],[9,3],[9,6],[9,9],[35,3],[35,1],[34,1],[34,1],[34,1],[34,1],[34,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[13,7],[13,5],[14,7],[61,2],[61,1],[63,4],[63,3],[15,8],[68,2],[68,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[37,2],[37,1],[37,1],[37,1],[37,3],[37,1],[37,1],[37,1],[37,1],[37,6],[37,2],[87,0],[87,0],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[69,1],[56,3],[56,3],[56,3],[56,2],[56,1],[70,2],[70,2],[70,2],[70,2],[70,1],[98,3],[99,3],[99,3],[99,1],[99,1],[17,5],[16,7],[22,6],[22,5],[103,4],[103,2],[21,6],[21,5],[104,3],[104,1],[20,5],[20,4],[77,4],[77,3],[26,1],[26,2],[23,4],[23,3],[24,4],[25,4],[33,3],[33,2],[79,4],[80,4],[78,4],[27,10],[27,8],[27,6],[27,15],[27,10],[114,3],[114,1],[115,5],[115,3],[81,4],[81,7],[29,8],[117,1],[117,1],[117,1],[117,2],[117,2],[117,2],[117,2],[117,1],[28,4],[84,4],[82,4],[83,6],[30,6],[31,7],[32,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 17: case 20: case 21: case 22: case 23: case 24: case 27:
 this.$=$$[$0-1]; 
break;
case 6:
this.$= new Incremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 7:
this.$= new Decremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 8:
this.$= new Incremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 9:
this.$= new Decremento($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 10: case 12: case 14: case 18: case 19: case 25: case 26: case 28: case 30: case 82:
 this.$=$$[$0]; 
break;
case 15:
this.$= new Break( _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 16:
this.$= new Continue( _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 31:
 
                var consola = Singleton.getInstance(); 
                const error = new Errores(this._$.first_line , this._$.first_column,"El caracter "+ yytext +" no se esperaba en esta posicion","Sint√°ctico");
                consola.add_errores(error);
                console.log("Error sintactico en la linea "+(yylineno+1));
                 
break;
case 32:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 33:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column );
break;
case 34:
this.$= new Declaracion($$[$0],$$[$0-1],null,false,_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 35:
this.$= new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column );
break;
case 36:
this.$= new AsignarVector($$[$0-5],parseInt($$[$0-3]), $$[$0],_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 38: case 118:
 $$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 39: case 119: case 141:
this.$ = [$$[$0]]
break;
case 40:
this.$=Tipo.INT;
break;
case 41:
this.$=Tipo.STRING;
break;
case 42:
this.$=Tipo.BOOLEAN;
break;
case 43:
this.$=Tipo.DOUBLE;
break;
case 44:
this.$=Tipo.CHAR;
break;
case 45:
this.$=new Literal($$[$0],Tipo.DOUBLE , _$[$0].first_line, _$[$0].first_column); console.log("pase por aca decimal");
break;
case 46:
this.$=new Literal($$[$0],Tipo.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 47:
this.$=new Literal($$[$0],Tipo.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 48:
this.$=new Literal($$[$0],Tipo.INT , _$[$0].first_line, _$[$0].first_column); console.log("pase por aca");
break;
case 49:
this.$=new Literal($$[$0],Tipo.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 50:
this.$=new Literal($$[$0],Tipo.NULL , _$[$0].first_line, _$[$0].first_column)
break;
case 51:
this.$=new If($$[$0-4],$$[$0-2],$$[$0] , _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 52:
this.$=new If($$[$0-2],$$[$0],null, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 58:
this.$= new For($$[$0-5],$$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 59: case 60: case 79:
this.$=$$[$0-1];
break;
case 61: case 106:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62: case 107:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$= new Aritmeticas(null,$$[$0],opcionesAritmeticas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 68:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 69: case 70: case 71: case 76: case 77: case 78: case 80: case 81: case 83: case 94: case 99: case 104: case 105: case 108: case 109: case 147: case 148: case 149: case 154:
this.$=$$[$0];
break;
case 72:
this.$= new IncrementoEx($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
this.$= new DecrementoEx($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 74:
this.$= new IncrementoEx($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 75:
this.$= new DecrementoEx($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 84:
this.$= new Push($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 85:
 
                        var consola = Singleton.getInstance(); 
                        const errorS = new Errores(this._$.first_line , this._$.first_column,"El caracter "+ yytext +" no se esperaba en esta posicion","Sint√°ctico");
                        consola.add_errores(errorS);
                        console.log("Error sintactico en la linea "+(yylineno+1));
                        
break;
case 88:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$= new Logicas(null,$$[$0],opcionesLogicas.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 100: case 150:
this.$= new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 101: case 151:
this.$= new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 102: case 152:
this.$= new Incremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 103: case 153:
this.$= new Decremento($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 110:
this.$= new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 112:
this.$= new InsFuncion($$[$0-4],$$[$0],$$[$0-2], Tipo.VOID, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 113:
this.$= new InsFuncion($$[$0-3],$$[$0],[], Tipo.VOID, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 114:
 $$[$0-3].push(new Declaracion([$$[$0]], $$[$0-1], null, true, _$[$0-3].first_line, _$[$0-3].first_column)); this.$ = $$[$0-3];
break;
case 115:
 this.$ = [new Declaracion([$$[$0]],$$[$0-1], null, true, _$[$0-1].first_line, _$[$0-1].first_column)]; 
break;
case 116:
this.$= new InsFuncion($$[$0-4],$$[$0],$$[$0-2], $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 117:
this.$= new InsFuncion($$[$0-3],$$[$0],[],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 120:
this.$= new LlamadaIns($$[$0-3],$$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 121:
this.$= new LlamadaIns($$[$0-2],[], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 122:
this.$= new Llamada($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 123:
this.$= new Llamada($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
this.$= new Return(null, _$[$0].first_line, _$[$0].first_column);
break;
case 125:
this.$= new Return($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 126:
this.$= new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 127:
this.$= new Println(null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
this.$= new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 129:
this.$= new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 130:
this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 131:
this.$= new Bloque([],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 132:
this.$= new toLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 133:
this.$= new toUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 134:
this.$= new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 135:
this.$= new Vector($$[$0-8], $$[$0-9], $$[$0-3], $$[$0-1], false,_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 136:
this.$= new Vector($$[$0-6],$$[$0-7],null, $$[$0-1], false,_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 137:
this.$= new Vector($$[$0-4],$$[$0-5],null, $$[$0], false,_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 140:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 142:
 $$[$0-4].push($$[$0-1]);this.$=$$[$0-4];
break;
case 143:
this.$ = [$$[$0-1]]
break;
case 144:
this.$= new VectorAcceso($$[$0-3],parseInt($$[$0-1]),_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 146:
this.$= new OpTernarioIns($$[$0-6], $$[$0-3], $$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 155:
this.$= new GraficarTS(_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 156:
this.$= new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 157:
this.$= new toCharArray($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 158:
this.$= new indexOf($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 159:
this.$= new PushIns($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 160:
this.$= new Pop($$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},{1:[3]},{2:$V0,5:[1,52],6:53,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},o($Vq,[2,3]),{8:[1,54]},{8:[1,55]},{11:[1,56],12:[1,57],36:$Vr,39:$Vs,85:[1,60]},{10:[1,61]},{10:[1,62]},o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),{8:[1,63]},{8:[1,64]},{8:[1,65]},o($Vq,[2,18]),o($Vq,[2,19]),{8:[1,66]},{8:[1,67]},{8:[1,68]},{8:[1,69]},{8:[1,70]},o($Vq,[2,25]),o($Vq,[2,26]),{8:[1,71]},o($Vq,[2,28]),o($Vq,[2,29]),o($Vq,[2,30]),{8:[1,72]},{10:[1,74],35:73},{34:75,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb},{55:[1,76]},{55:[1,77]},{55:[1,78]},{33:79,60:$Vf},{55:[1,80]},{10:[1,81]},{10:[1,82]},{55:[1,83]},{55:[1,84]},{55:[1,85]},{2:$Vt,8:[2,124],10:$Vu,11:$Vv,12:$Vw,25:91,37:86,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{55:[1,114]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:115,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$V0,4:119,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,62:[1,120],67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},o($VL,[2,40]),o($VL,[2,41]),o($VL,[2,42]),o($VL,[2,43]),o($VL,[2,44]),{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,4]),o($Vq,[2,5]),{8:[1,121]},{8:[1,122]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:123,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{40:[1,124]},{86:[1,125],122:[1,126],123:[1,127]},{8:[1,128]},{8:[1,129]},o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,27]),o($Vq,[2,31]),{8:[2,34],36:[1,130],42:$VM},o($VN,$VO,{39:[1,133],55:[1,132]}),{10:$VP,35:134},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:136,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{10:[1,137]},{7:139,9:140,10:[1,142],34:141,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,68:138},{100:[1,143]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:144,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{55:[1,145]},{55:[1,146]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:147,57:[1,148],69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:149,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:150,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{8:[2,125],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:157,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($VW,[2,68],{11:[1,158],12:[1,159],39:[1,162],55:[1,161],85:[1,160]}),o($VW,[2,69]),o($VW,[2,70]),o($VW,[2,71]),{10:[1,163]},{10:[1,164]},o($VW,[2,76]),o($VW,[2,77]),o($VW,[2,78]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:165,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($VW,[2,80]),o($VW,[2,81]),o($VW,[2,82]),o($VW,[2,83]),{8:[1,166]},o($VW,[2,45]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),{55:[1,167]},{55:[1,168]},{55:[1,169]},{55:[1,170]},{55:[1,171]},{57:[1,172]},{57:[1,173],94:$VX,95:$VY,96:$VZ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:177,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($V_,[2,99],{88:$V$,89:$V01,90:$V11,91:$V21,92:$V31,93:$V41}),o([8,57,88,89,90,91,92,93,94,95,96],[2,94],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{2:$V0,6:53,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,62:[1,184],67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},o($V51,[2,131]),o($Vq,[2,6]),o($Vq,[2,7]),o($V61,[2,35],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{41:[1,185]},{55:[1,186]},{55:[1,187]},{55:[1,188]},o($Vq,[2,8]),o($Vq,[2,9]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:189,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{10:[1,190]},{34:193,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,57:[1,192],103:191},{41:[1,194]},{36:[1,195],42:$VM},o($VN,$VO),{57:[1,196],94:$VX,95:$VY,96:$VZ},{57:[1,197]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:198,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{8:[1,199]},{8:[1,200]},{10:$VP,35:73},{36:$Vr,39:$Vs},{55:[1,201]},{57:[1,202],94:$VX,95:$VY,96:$VZ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:205,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,57:[1,204],72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,104:203,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{34:193,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,57:[1,207],103:206},{57:[1,208],94:$VX,95:$VY,96:$VZ},o($V61,[2,127]),{57:[1,209],94:$VX,95:$VY,96:$VZ},{57:[1,210],94:$VX,95:$VY,96:$VZ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:211,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:212,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:213,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:214,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:215,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:216,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($VW,[2,67]),o($VW,[2,72]),o($VW,[2,73]),{86:[1,217],121:[1,218]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:205,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,57:[1,220],72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,104:219,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{40:[1,221]},o($VW,[2,74]),o($VW,[2,75]),{57:[1,222],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},o($VW,[2,85]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:223,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:224,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:225,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:226,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:227,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{8:[1,228]},{116:[1,229]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:230,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:231,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:232,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($V_,[2,98]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:233,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:234,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:235,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:236,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:237,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,69:238,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($V51,[2,130]),{36:[1,239],39:[1,240]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:241,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:242,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{40:[1,243]},{8:[2,32],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},o($VN,[2,38]),{42:$V71,57:[1,244]},{33:246,60:$Vf},{10:[1,247]},{36:[1,248],39:[1,249]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:250,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{33:251,60:$Vf},{60:[1,252]},{8:[1,253],88:$V$,89:$V01,90:$V11,91:$V21,92:$V31,93:$V41},o($V81,[2,59]),o($V81,[2,60]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:118,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:254,69:117,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,97:$VK,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{33:255,60:$Vf},{42:$V91,57:[1,256]},o($V61,[2,121]),o($Va1,[2,119],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{42:$V71,57:[1,258]},{33:259,60:$Vf},o($V61,[2,126]),o($V61,[2,128]),o($VW,[2,129]),o($Vb1,[2,61],{73:$VS,74:$VT,75:$VU,76:$VV}),o($Vb1,[2,62],{73:$VS,74:$VT,75:$VU,76:$VV}),o($Vc1,[2,63],{76:$VV}),o($Vc1,[2,64],{76:$VV}),o($Vc1,[2,65],{76:$VV}),o($VW,[2,66]),{55:[1,260]},{55:[1,261]},{42:$V91,57:[1,262]},o($VW,[2,123]),{41:[1,263]},o($VW,[2,79]),{57:[1,264],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,265],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,266],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,267],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,268],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},o($Vq,[2,155]),{9:272,10:$Vd1,11:$Ve1,12:$Vf1,20:276,23:271,24:270,105:$Vk,107:$Vm,108:$Vn,117:269},o([57,94],[2,95],{95:$VY,96:$VZ}),o([57,94,95],[2,96],{96:$VZ}),o($V_,[2,97]),o($Vg1,[2,88]),o($Vg1,[2,89]),o($Vg1,[2,90]),o($Vg1,[2,91]),o($Vg1,[2,92]),o($Vg1,[2,93]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:277,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{40:[1,278]},{57:[1,279],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,280],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{42:[1,281]},{33:282,60:$Vf},{34:283,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb},o($Vq,[2,117]),o($Va1,[2,115]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:286,39:[1,285],40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,113:[1,284],119:$VI,120:$VJ},{41:[1,287]},{8:[2,33],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},o($Vq,[2,52],{58:[1,288]}),{61:289,63:290,64:$Vh1,66:$Vi1},{10:[1,294],11:[1,295],12:[1,296],70:293,98:297},{57:[1,298],94:$VX,95:$VY,96:$VZ},o($Vq,[2,110]),o($V61,[2,120]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:299,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{33:300,60:$Vf},o($Vq,[2,113]),{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:301,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:302,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($VW,[2,122]),o($VW,[2,144],{39:[1,303]}),o($VW,[2,134]),o($VW,[2,132]),o($VW,[2,133]),o($VW,[2,157]),o($VW,[2,156]),{65:[1,304]},o($V61,[2,147]),o($V61,[2,148]),o($V61,[2,149]),{11:[1,305],12:[1,306],36:$Vr,39:$Vs},{10:[1,307]},{10:[1,308]},o($V61,[2,154]),o($V61,[2,36],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{41:[1,309]},{8:[2,159]},{8:[1,310]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:311,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},o($Vq,[2,116]),{10:[1,312]},{34:313,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:315,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,114:314,119:$VI,120:$VJ},{8:[2,137],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{36:[1,316]},{33:317,60:$Vf},{62:[1,318],63:319,64:$Vh1,66:$Vi1},o($Vj1,[2,55]),{40:$Vx,48:320,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC},{65:[1,321]},{57:[1,322]},{11:[1,323],12:[1,324],36:[1,325]},{10:[1,326]},{10:[1,327]},{57:[2,104]},{33:328,60:$Vf},o($Va1,[2,118],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),o($Vq,[2,112]),{57:[1,329],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{57:[1,330],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},{40:[1,331]},{9:272,10:$Vd1,11:$Ve1,12:$Vf1,20:276,23:271,24:270,105:$Vk,107:$Vm,108:$Vn,117:332},o($V61,[2,150]),o($V61,[2,151]),o($V61,[2,152]),o($V61,[2,153]),{36:[1,333]},o($Vq,[2,160]),{57:[1,334],71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV},o($Va1,[2,114]),{39:[1,335]},{41:[1,336],42:$Vk1},o($Vl1,[2,141],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{39:[1,339],113:[1,338]},o($Vq,[2,51]),o($Vq,[2,53]),o($Vj1,[2,54]),{65:[1,340]},{2:$V0,4:341,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},{33:342,60:$Vf},{57:[2,100]},{57:[2,101]},{10:$Vm1,40:$Vx,48:345,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,99:343},{57:[2,102]},{57:[2,103]},o($Vq,[2,111]),o($VW,[2,84]),o($VW,[2,158]),{41:[1,346]},{8:[1,347]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:348,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{8:[1,349]},{40:[1,350]},{8:[2,136]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:351,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,119:$VI,120:$VJ},{34:352,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb},{39:[1,354],115:353},{2:$V0,4:355,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,13:9,14:10,15:11,16:12,17:13,18:$V4,19:$V5,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp},o($Vj1,[2,57],{7:4,9:5,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,6:53,2:$V0,10:$V1,11:$V2,12:$V3,18:$V4,19:$V5,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp}),o($Vq,[2,58]),{57:[2,105]},{57:[2,108],71:[1,356],72:[1,357]},{57:[2,109]},o($VW,[2,145]),o($Vq,[2,146]),o($V61,[2,37],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),o($Vq,[2,161]),{41:[1,358]},o($Vl1,[2,140],{71:$VQ,72:$VR,73:$VS,74:$VT,75:$VU,76:$VV}),{39:[1,359]},{41:[1,360],42:[1,361]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:315,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,114:362,119:$VI,120:$VJ},o($Vj1,[2,56],{7:4,9:5,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:31,6:53,2:$V0,10:$V1,11:$V2,12:$V3,18:$V4,19:$V5,38:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,54:$Vc,55:$Vd,59:$Ve,60:$Vf,67:$Vg,100:$Vh,101:$Vi,102:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,118:$Vp}),{10:$Vm1,40:$Vx,48:345,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,99:363},{10:$Vm1,40:$Vx,48:345,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,99:364},{8:[2,135]},{40:[1,365]},{8:[2,139]},{39:[1,366]},{41:[1,367],42:$Vk1},{57:[2,106]},{57:[2,107]},{41:[1,368]},{2:$Vt,10:$Vu,11:$Vv,12:$Vw,25:91,37:315,40:$Vx,48:89,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,72:$VE,77:90,78:94,79:95,80:96,81:98,82:99,83:100,84:101,109:$Vo,110:$VF,111:$VG,112:$VH,114:369,119:$VI,120:$VJ},o($Vl1,[2,143]),{39:[1,370]},{41:[1,371],42:$Vk1},{40:[1,372]},o($Vl1,[2,142]),{41:[1,373]},{8:[2,138]}],
defaultActions: {52:[2,1],279:[2,159],297:[2,104],323:[2,100],324:[2,101],326:[2,102],327:[2,103],336:[2,136],343:[2,105],345:[2,109],358:[2,135],360:[2,139],363:[2,106],364:[2,107],373:[2,138]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Declaracion} = require('../instrucciones/declaracion')
    const {Literal} = require('../expresiones/literal')
    const {Tipo} = require('../simbolos/tipo');
    const {Aritmeticas} = require('../expresiones/aritmeticas');
    const {opcionesAritmeticas} = require('../expresiones/opcionesAritmeticas');
    const {Logicas} = require('../expresiones/logicas');
    const {opcionesLogicas} = require('../expresiones/opcionesLogicas');
    const {Relacional} = require('../expresiones/relacional');
    const {opcionesRelacionales} = require('../expresiones/opcionesRelacionales');
    const {Acceso} = require('../expresiones/acceso');
    const {Asignar} = require('../instrucciones/asignar');
    const {Print} = require('../instrucciones/Reservadas/print');
    const {Println} = require('../instrucciones/Reservadas/println');
    const {Bloque} = require('../instrucciones/bloque');
    const {Errores} = require('../errores/errores');
    const {Singleton} = require('../patronSingleton/singleton');
    const {DecrementoEx} = require('../expresiones/Aritmeticas/decrementoEx');
    const {IncrementoEx} = require('../expresiones/Aritmeticas/incrementoEx');
    const {Round} = require('../expresiones/Reservadas/round');
    const {toLower} = require('../expresiones/Reservadas/toLower');
    const {toUpper} = require('../expresiones/Reservadas/toUpper');
    const {TypeOf} = require('../expresiones/Reservadas/typeOf');
    //Segunda tanda
    const {Llamada} = require('../expresiones/call');
    const {For} = require('../instrucciones/Ciclicas/for');
    const {While} = require('../instrucciones/Ciclicas/while');
    const {If} = require('../instrucciones/control/if');
    const {Decremento} = require('../instrucciones/IncDec/decremento');
    const {Incremento} = require('../instrucciones/IncDec/incremento');
    const {Break} = require('../instrucciones/Transicion/break');
    const {Continue} = require('../instrucciones/Transicion/continue');
    const {Return} = require('../instrucciones/Transicion/return');
    const {InsFuncion} = require('../instrucciones/funcion');

    //Tercera Tanda
    const {LlamadaIns} = require('../instrucciones/callInstruccion');
    const {OpTernario} = require('../expresiones/opTernario');
    const {Vector} = require('../instrucciones/Arrays/vector');
    const {OpTernarioIns} = require('../instrucciones/opTernarioIns');
    const {GraficarTS} = require('../instrucciones/graficarTS');

    //cuarta Tanda
    const {Push} = require('../expresiones/Arrays/push');
    const {VectorAcceso} = require('../expresiones/Arrays/vectorAcceso');
    const {indexOf} = require('../expresiones/Reservadas/indexOf');
    const {Length} = require('../expresiones/Reservadas/length');
    const {toCharArray} = require('../expresiones/Reservadas/toCharArray');
    const {Pop} = require('../instrucciones/Arrays/pop');
    const {PushIns} = require('../instrucciones/Arrays/pushIns');
    const {AsignarVector} = require('../instrucciones/asignarVector');

    var cadena = '';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: cadena = ''; this.begin("string"); 
break;
case 1: cadena += yy_.yytext; 
break;
case 2: cadena += "\""; 
break;
case 3: cadena += "\n"; 
break;
case 4: cadena += " ";  
break;
case 5: cadena += "\t"; 
break;
case 6: cadena += "\\"; 
break;
case 7: cadena += "\'"; 
break;
case 8: cadena += "\r"; 
break;
case 9: yy_.yytext = cadena; this.popState(); return 50; 
break;
case 10:
break;
case 11:console.log("Comentario una l√≠nea");
break;
case 12:console.log("Comentario multi");
break;
case 13:return 52
break;
case 14: return 49; 
break;
case 15: return 40; 
break;
case 16: return 51; 
break;
case 17: return 43; 
break;
case 18: return 44; 
break;
case 19: return 45; 
break;
case 20: return 46; 
break;
case 21: return 47; 
break;
case 22: return 38; 
break;
case 23: return 54; 
break;
case 24: return 58; 
break;
case 25: return 59; 
break;
case 26: return 64; 
break;
case 27: return 66; 
break;
case 28: return 18; 
break;
case 29: return 67; 
break;
case 30: return 101; 
break;
case 31: return 100; 
break;
case 32: return 19; 
break;
case 33: return 102; 
break;
case 34: return 105; 
break;
case 35: return 53; 
break;
case 36: return 106; 
break;
case 37: return 107; 
break;
case 38: return 108; 
break;
case 39: return 109; 
break;
case 40: return 110; 
break;
case 41: return 111; 
break;
case 42: return 112; 
break;
case 43: return 113; 
break;
case 44: return 119; 
break;
case 45: return 120; 
break;
case 46: return 121; 
break;
case 47: return 86; 
break;
case 48: return 122; 
break;
case 49: return 123; 
break;
case 50: return 118; 
break;
case 51: return 10; 
break;
case 52: return 85 
break;
case 53: return 92 
break;
case 54: return 36 
break;
case 55: return 93 
break;
case 56: return 91 
break;
case 57: return 89 
break;
case 58: return 90 
break;
case 59: return 88 
break;
case 60: return 116 
break;
case 61: return 65 
break;
case 62: return 97 
break;
case 63: return 94 
break;
case 64: return 95 
break;
case 65: return 96 
break;
case 66: return 55 
break;
case 67: return 57 
break;
case 68: return 8 
break;
case 69: return 42 
break;
case 70: return 11 
break;
case 71: return 12 
break;
case 72: return 71 
break;
case 73: return 72 
break;
case 74: return 74 
break;
case 75: return 76 
break;
case 76: return 73 
break;
case 77: return 75 
break;
case 78: return 60 
break;
case 79: return 62 
break;
case 80: return 39 
break;
case 81: return 41 
break;
case 82:
break;
case 83:
break;
case 84:return 5;
break;
case 85:
                                        var consola = Singleton.getInstance(); 
                                        const error = new Errores(yy_.yylloc.first_line , yy_.yylloc.first_column,"El caracter "+ yy_.yytext+ "no se reconoce en el lenguaje.","L√©xico");
                                        consola.add_errores(error);
                                        console.log("ERROR LEXICO EN LA LINEA "+ yy_.yylloc.first_line + "Y EN LA COLUMNA "+yy_.yylloc.first_column + " EL TEXTO ES "+ yy_.yytext);
                                    
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:length\b)/i,/^(?:toCharArray\b)/i,/^(?:indexOf\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9],"inclusive":false},"INITIAL":{"rules":[0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}