/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,12],$V2=[1,13],$V3=[1,41],$V4=[1,25],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[1,28],$Vb=[1,29],$Vc=[1,40],$Vd=[1,30],$Ve=[1,26],$Vf=[1,27],$Vg=[1,32],$Vh=[1,31],$Vi=[1,35],$Vj=[1,33],$Vk=[1,39],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[2,5,16,17,34,35,37,38,39,40,41,50,58,59,61,63,65,66,87,88,90,91,92,96,97,98,99,100],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,79],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,78],$VB=[8,48,53,70,71,72,73,74,76,77,78,79,80,81,82,83,84],$VC=[1,96],$VD=[32,36],$VE=[2,38],$VF=[1,110],$VG=[1,116],$VH=[1,115],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[1,120],$VM=[8,36,48,53,64,70,71,72,73,74,76,77,78,79,80,81,82,83,84],$VN=[2,5,16,17,34,35,37,38,39,40,41,50,56,58,59,61,63,65,66,87,88,90,91,92,96,97,98,99,100],$VO=[1,127],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[53,82,83,84],$VT=[1,133],$VU=[1,134],$VV=[1,135],$VW=[1,136],$VX=[1,137],$VY=[1,138],$VZ=[36,53],$V_=[2,114],$V$=[2,109],$V01=[1,175],$V11=[35,43,44,45,46,47,48,49,51,87,88,100],$V21=[1,189],$V31=[1,191],$V41=[8,48,53,70,76,77,78,79,80,81,82,83,84],$V51=[8,48,53,70,71,72,73,76,77,78,79,80,81,82,83,84],$V61=[8,53,82,83,84],$V71=[1,200],$V81=[1,201],$V91=[61,63,65],$Va1=[1,225];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAWHILE":15,"BREAK":16,"CONTINUE":17,"INSTRUCCIONLLAMAR":18,"FUNCION":19,"METODO":20,"FUNCIONPRINTLN":21,"FUNCIONPRINT":22,"FUNCIONTYPEOF":23,"INSTRUCCIONRETURN":24,"BLOQUE":25,";":26,"INSTRUCCIONIFSIMPLE":27,"DECLARACIONNORMAL":28,"DECLARACIONCONSTANTE":29,"TIPODATO":30,"IDS":31,"igual":32,"EXPRESIONARITMETICA":33,"CONST":34,"id":35,"coma":36,"INT":37,"STRING":38,"BOOLEAN":39,"DOUBLE":40,"CHAR":41,"IGUALACIONDEDATO":42,"entero":43,"cadena":44,"booleano":45,"decimal":46,"caracter":47,"RESTA":48,"null":49,"IF":50,"parentesisA":51,"EXPRESIONLOGICA":52,"parentesisC":53,"VARIOSIF":54,"SENTENCIAELSEIF":55,"ELSE":56,"SENTENCIAELSEIFSIMPLE":57,"SWITCH":58,"llaveA":59,"CASOS":60,"llaveC":61,"CASO":62,"CASE":63,"dosPuntos":64,"DEFAULT":65,"FOR":66,"VARIABLEFOR":67,"EXPRESIONESRELACIONALES":68,"INCREMENTODECREMENTOFOR":69,"SUMA":70,"MULTIPLICACION":71,"DIVISION":72,"MODULO":73,"POTENCIA":74,"EXPRESIONLLAMAR":75,"mayorQue":76,"mayorIgual":77,"menorQue":78,"menorIgual":79,"igualDoble":80,"diferenteDe":81,"OR":82,"AND":83,"XOR":84,"NOT":85,"FORINCREMENTODECREMENTO":86,"incremento":87,"decremento":88,"SUMARESTA":89,"WHILE":90,"DO":91,"VOID":92,"PARAMETROS":93,"PARAMETRO":94,"PARAMETROSCALL":95,"CALL":96,"RETORNO":97,"PRINTLN":98,"PRINT":99,"TYPEOF":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",16:"BREAK",17:"CONTINUE",26:";",32:"igual",34:"CONST",35:"id",36:"coma",37:"INT",38:"STRING",39:"BOOLEAN",40:"DOUBLE",41:"CHAR",43:"entero",44:"cadena",45:"booleano",46:"decimal",47:"caracter",48:"RESTA",49:"null",50:"IF",51:"parentesisA",53:"parentesisC",56:"ELSE",58:"SWITCH",59:"llaveA",61:"llaveC",63:"CASE",64:"dosPuntos",65:"DEFAULT",66:"FOR",70:"SUMA",71:"MULTIPLICACION",72:"DIVISION",73:"MODULO",74:"POTENCIA",76:"mayorQue",77:"mayorIgual",78:"menorQue",79:"menorIgual",80:"igualDoble",81:"diferenteDe",82:"OR",83:"AND",84:"XOR",85:"NOT",87:"incremento",88:"decremento",90:"WHILE",91:"DO",92:"VOID",96:"CALL",97:"RETORNO",98:"PRINTLN",99:"PRINT",100:"TYPEOF"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[7,1],[7,1],[28,4],[29,5],[9,3],[31,3],[31,1],[30,1],[30,1],[30,1],[30,1],[30,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[42,2],[42,1],[11,5],[55,7],[55,3],[55,0],[57,8],[57,4],[57,0],[54,2],[54,3],[12,7],[60,2],[60,1],[62,4],[62,3],[13,8],[67,2],[67,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[68,3],[68,3],[68,3],[68,3],[68,3],[68,3],[68,1],[52,3],[52,3],[52,3],[52,2],[52,1],[69,1],[69,1],[10,2],[10,2],[10,2],[10,2],[86,3],[89,3],[89,3],[89,1],[89,1],[15,5],[14,3],[20,6],[93,3],[93,1],[93,0],[94,2],[19,6],[95,3],[95,1],[95,0],[18,5],[75,4],[24,1],[24,2],[21,4],[22,4],[23,4],[25,3],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine el an√°lisis");
break;
case 22:
 
                //get instance
                //meterlo
                console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
case 34:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 35:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column );
break;
case 36:
console.log($$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 37:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 38: case 75: case 77: case 78: case 79: case 80:
this.$=$$[$0];
break;
case 39:
this.$="int";
break;
case 40:
this.$="string";
break;
case 41:
this.$="boolean";
break;
case 42:
this.$="double";
break;
case 43:
this.$="char";
break;
case 44:
this.$=new Literal($$[$0],Tipo.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 45:
this.$=new Literal($$[$0],Tipo.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 46:
this.$=new Literal($$[$0],Tipo.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 47:
this.$=new Literal($$[$0],Tipo.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 48:
this.$=new Literal($$[$0],Tipo.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 49:
this.$=new Literal($$[$0-1]+$$[$0],Tipo.INT , _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 50:
this.$=new Literal($$[$0-1]+$$[$0],Tipo.DOUBLE , _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 51:
this.$=new Literal($$[$0],Tipo.NULL , _$[$0].first_line, _$[$0].first_column)
break;
case 69:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},o($Vo,[2,3]),{8:[1,49]},{8:[1,50]},{8:[1,51]},o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),{8:[1,52]},{8:[1,53]},{8:[1,54]},o($Vo,[2,15]),o($Vo,[2,16]),{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},o($Vo,[2,21]),{26:[1,59]},{8:[2,32]},{8:[2,33]},{32:$Vp,87:$Vq,88:$Vr},{35:[1,63]},{35:[1,64]},{51:[1,65]},{51:[1,66]},{51:[1,67]},{25:68,59:$Vc},{51:[1,69]},{35:[1,70]},{31:72,35:[1,71]},{35:[1,73]},{51:[1,74]},{51:[1,75]},{51:[1,76]},{8:[2,117],10:83,23:82,33:77,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{2:$V0,4:91,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,61:[1,92],66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{30:93,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{35:[2,39]},{35:[2,40]},{35:[2,41]},{35:[2,42]},{35:[2,43]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,22]),{10:83,23:82,33:94,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},o($VB,[2,95]),o($VB,[2,96]),o($VB,[2,97]),o($VB,[2,98]),{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:95,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},{35:[1,99]},{7:101,9:102,28:23,29:24,30:104,34:$V3,35:[1,103],37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,67:100},{15:105,90:$Vg},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:106,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},{51:[1,107]},o($VD,$VE,{51:[1,108]}),{32:[1,109],36:$VF},{51:[1,111]},{10:83,23:82,33:112,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:113,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:114,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{8:[2,118],48:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},{10:83,23:82,33:121,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},o($VB,[2,76],{51:[1,122],87:$Vq,88:$Vr}),o($VB,[2,77]),o($VB,[2,78]),o($VB,[2,79]),o($VB,[2,80]),o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),{43:[1,123],46:[1,124]},o($VM,[2,51]),{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,61:[1,125],66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},o($VN,[2,123]),{31:126,35:$VO},{8:[2,36],48:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},{53:[1,128],82:$VP,83:$VQ,84:$VR},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:132,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},o($VS,[2,92],{76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY}),o([8,53,76,77,78,79,80,81,82,83,84],[2,87],{48:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL}),{53:[1,139]},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:140,75:81,87:$Ve,88:$Vf,100:$Vn},{8:[1,141]},{8:[1,142]},{32:$Vp},{31:72,35:$VO},o($Vo,[2,105]),{53:[1,143],82:$VP,83:$VQ,84:$VR},o($VZ,$V_,{95:144,42:145,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($VZ,$V$,{93:146,94:147,30:148,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9}),{10:83,23:82,33:149,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{35:[1,150]},o($VZ,$V$,{94:147,30:148,93:151,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9}),{48:$VG,53:[1,152],70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},{48:$VG,53:[1,153],70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},{48:$VG,53:[1,154],70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},{10:83,23:82,33:155,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:156,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:157,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:158,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:159,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:160,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},{48:$VG,53:[1,161],70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},o($VZ,$V_,{42:145,95:162,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($VM,[2,49]),o($VM,[2,50]),o($VN,[2,122]),{32:[1,163],36:$VF},o($VD,$VE),{7:167,9:168,10:169,16:$V01,18:170,21:171,22:172,23:173,24:174,25:165,27:166,28:23,29:24,30:104,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,54:164,59:$Vc,87:$Ve,88:$Vf,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:176,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:177,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:178,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},o($VS,[2,91]),{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:179,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:180,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:181,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:182,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:183,75:81,87:$Ve,88:$Vf,100:$Vn},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,68:184,75:81,87:$Ve,88:$Vf,100:$Vn},{59:[1,185]},{8:[1,186],76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY},o($V11,[2,67]),o($V11,[2,68]),{25:187,59:$Vc},{36:$V21,53:[1,188]},o($VZ,[2,113]),{36:$V31,53:[1,190]},o($VZ,[2,108]),{35:[1,192]},{8:[2,34],48:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},o($VD,[2,37]),{36:$V31,53:[1,193]},{8:[2,119]},{8:[2,120]},o($VB,[2,121]),o($V41,[2,69],{71:$VI,72:$VJ,73:$VK,74:$VL}),o($V41,[2,70],{71:$VI,72:$VJ,73:$VK,74:$VL}),o($V51,[2,71],{74:$VL}),o($V51,[2,72],{74:$VL}),o($V51,[2,73],{74:$VL}),o($VB,[2,74]),o($VB,[2,75]),{36:$V21,53:[1,194]},{10:83,23:82,33:195,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,75:81,87:$Ve,88:$Vf,100:$Vn},o($Vo,[2,52]),o($VN,[2,55],{55:196}),{8:[1,197]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},{8:[2,27]},{8:[2,28]},{8:[2,29]},{8:[2,30]},{8:[2,31]},o([53,82],[2,88],{83:$VQ,84:$VR}),o([53,82,83],[2,89],{84:$VR}),o($VS,[2,90]),o($V61,[2,81]),o($V61,[2,82]),o($V61,[2,83]),o($V61,[2,84]),o($V61,[2,85]),o($V61,[2,86]),{60:198,62:199,63:$V71,65:$V81},{10:203,35:[1,205],69:202,86:204,87:$Ve,88:$Vf},o($Vo,[2,104]),{8:[2,115]},{42:206,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz},{25:207,59:$Vc},{30:148,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,94:208},o($VZ,[2,110]),{25:209,59:$Vc},o($VB,[2,116]),{8:[2,35],48:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL},o($Vo,[2,59],{56:[1,210]}),o($VN,[2,58],{57:211}),{61:[1,212],62:213,63:$V71,65:$V81},o($V91,[2,63]),{42:214,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz},{64:[1,215]},{53:[1,216]},{53:[2,93]},{53:[2,94]},{32:[1,217],87:$Vq,88:$Vr},o($VZ,[2,112]),o($Vo,[2,111]),o($VZ,[2,107]),o($Vo,[2,106]),{25:219,50:[1,218],59:$Vc},o($Vo,[2,60],{56:[1,220]}),o($Vo,[2,61]),o($V91,[2,62]),{64:[1,221]},{2:$V0,4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{25:223,59:$Vc},{35:$Va1,42:226,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,89:224},{51:[1,227]},o($VN,[2,54]),{7:167,9:168,10:169,16:$V01,18:170,21:171,22:172,23:173,24:174,27:229,28:23,29:24,30:104,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:[1,228],87:$Ve,88:$Vf,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{2:$V0,4:230,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},o($V91,[2,65],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,6:48,2:$V0,16:$V1,17:$V2,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn}),o($Vo,[2,66]),{53:[2,99]},{48:[1,232],53:[2,102],70:[1,231]},{53:[2,103]},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:233,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},{51:[1,234]},{8:[1,235]},o($V91,[2,64],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,6:48,2:$V0,16:$V1,17:$V2,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,50:$Va,58:$Vb,59:$Vc,66:$Vd,87:$Ve,88:$Vf,90:$Vg,91:$Vh,92:$Vi,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn}),{35:$Va1,42:226,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,89:236},{35:$Va1,42:226,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,89:237},{53:[1,238],82:$VP,83:$VQ,84:$VR},{10:83,23:82,33:98,35:$Vs,42:80,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:$VA,52:239,68:97,75:81,85:$VC,87:$Ve,88:$Vf,100:$Vn},o($VN,[2,57]),{53:[2,100]},{53:[2,101]},{25:240,59:$Vc},{53:[1,241],82:$VP,83:$VQ,84:$VR},o($VN,[2,53]),{7:167,9:168,10:169,16:$V01,18:170,21:171,22:172,23:173,24:174,27:242,28:23,29:24,30:104,34:$V3,35:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,87:$Ve,88:$Vf,96:$Vj,97:$Vk,98:$Vl,99:$Vm,100:$Vn},{8:[1,243]},o($VN,[2,56])],
defaultActions: {23:[2,32],24:[2,33],42:[2,39],43:[2,40],44:[2,41],45:[2,42],46:[2,43],47:[2,1],152:[2,119],153:[2,120],167:[2,23],168:[2,24],169:[2,25],170:[2,26],171:[2,27],172:[2,28],173:[2,29],174:[2,30],175:[2,31],188:[2,115],203:[2,93],204:[2,94],224:[2,99],226:[2,103],236:[2,100],237:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Declaracion} = require('../instrucciones/declaracion')
    const {Literal} = require('../expresiones/literal')
    const {Tipo} = require('../simbolos/tipo');
    const {Aritmeticas} = require('../expresiones/aritmeticas');
    const {opcionesAritmeticas} = require('../expresiones/opcionesAritmeticas');
    const {Logicas} = require('../expresiones/logicas');
    const {opcionesLogicas} = require('../expresiones/opcionesLogicas');
    const {Relacional} = require('../expresiones/relacional');
    const {opcionesRelacionales} = require('../expresiones/opcionesRelacionales');
    const {Acceso} = require('../expresiones/acceso');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                        console.log("Comentario una l√≠nea");
                                    
break;
case 2:
                                        console.log("Comentario multi");
                                    
break;
case 3:
                                        return 44;
                                    
break;
case 4:
                                        return 47;
                                    
break;
case 5:
                                        return 46;
                                    
break;
case 6:
                                        return 43;
                                    
break;
case 7:
                                        return 45;
                                    
break;
case 8:
                                        return 37;
                                    
break;
case 9:
                                        return 38;
                                    
break;
case 10:
                                        return 39;
                                    
break;
case 11:
                                        return 40;
                                    
break;
case 12:
                                        return 41;
                                    
break;
case 13:
                                        return 34;
                                    
break;
case 14:
                                        return 50;
                                    
break;
case 15:
                                        return 56;
                                    
break;
case 16:
                                        return 58;
                                    
break;
case 17:
                                        return 63;
                                    
break;
case 18:
                                        return 65;
                                    
break;
case 19:
                                        return 16;
                                    
break;
case 20:
                                        return 66;
                                    
break;
case 21:
                                        return 91;
                                    
break;
case 22:
                                        return 90;
                                    
break;
case 23:
                                        return 17;
                                    
break;
case 24:
                                        return 92;
                                    
break;
case 25:
                                        return 96;
                                    
break;
case 26:
                                        return 49;
                                    
break;
case 27:
                                        return 97;
                                    
break;
case 28:
                                        return 98;
                                    
break;
case 29:
                                        return 99;
                                    
break;
case 30:
                                        return 100;
                                    
break;
case 31:
                                        return 35;
                                    
break;
case 32:
                                        return 80
                                    
break;
case 33:
                                        return 32
                                    
break;
case 34:
                                        return 81
                                    
break;
case 35:
                                        return 79
                                    
break;
case 36:
                                        return 77
                                    
break;
case 37:
                                        return 78
                                    
break;
case 38:
                                        return 76
                                    
break;
case 39:
                                        return 'interrogacionCierra'
                                    
break;
case 40:
                                        return 64
                                    
break;
case 41:
                                        return 85
                                    
break;
case 42:
                                        return 82
                                    
break;
case 43:
                                        return 83
                                    
break;
case 44:
                                        return 84
                                    
break;
case 45:
                                        return 51
                                    
break;
case 46:
                                        return 53
                                    
break;
case 47:
                                        return 8
                                    
break;
case 48:
                                        return 36
                                    
break;
case 49:
                                        return 87
                                    
break;
case 50:
                                        return 88
                                    
break;
case 51:
                                        return 70
                                    
break;
case 52:
                                        return 48
                                    
break;
case 53:
                                        return 72
                                    
break;
case 54:
                                        return 74
                                    
break;
case 55:
                                        return 71
                                    
break;
case 56:
                                        return 73
                                    
break;
case 57:
                                        return 59
                                    
break;
case 58:
                                        return 61
                                    
break;
case 59:
                                        return 'corcheteA'
                                    
break;
case 60:
                                        return 'corcheteC'
                                    
break;
case 61:
break;
case 62:
break;
case 63:return 5;
break;
case 64:
                                        //let error = new Errores(yy_.yylloc.first_line,  yy_.yylloc.first_column, "La expresi√≥n " + yy_.yytext + " no pertenece al lenguaje", "L√©xico")
                                        console.log("ERROR LEXICO EN LA LINEA "+ yy_.yylloc.first_line + "Y EN LA COLUMNA "+yy_.yylloc.first_column + " EL TEXTO ES "+ yy_.yytext);
                                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:("(\\"|\\r|\\\\|\\n|\\t|[^\"])*"))/i,/^(?:('(\\"|\\r|\\\\|\\n|\\t|[^\'])?'))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}