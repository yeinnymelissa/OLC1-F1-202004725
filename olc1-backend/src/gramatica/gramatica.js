/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,12],$V2=[1,13],$V3=[1,25],$V4=[1,41],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[1,28],$Vb=[1,29],$Vc=[1,40],$Vd=[1,30],$Ve=[1,26],$Vf=[1,27],$Vg=[1,32],$Vh=[1,31],$Vi=[1,35],$Vj=[1,33],$Vk=[1,39],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[2,5,16,17,31,34,35,36,37,38,39,48,56,57,59,61,63,64,85,86,88,89,90,95,96,97,98,99],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,78],$Vt=[1,83],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,77],$VB=[8,46,51,68,69,70,71,72,74,75,76,77,78,79,80,81,82],$VC=[1,95],$VD=[1,108],$VE=[1,114],$VF=[1,113],$VG=[1,115],$VH=[1,116],$VI=[1,117],$VJ=[1,118],$VK=[8,46,51,62,68,69,70,71,72,74,75,76,77,78,79,80,81,82,92],$VL=[2,5,16,17,31,34,35,36,37,38,39,48,54,56,57,59,61,63,64,85,86,88,89,90,95,96,97,98,99],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[51,80,81,82],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[1,135],$VW=[51,92],$VX=[2,112],$VY=[2,107],$VZ=[1,173],$V_=[31,41,42,43,44,45,46,47,49,85,86,99],$V$=[1,188],$V01=[1,190],$V11=[8,46,51,68,74,75,76,77,78,79,80,81,82],$V21=[8,46,51,68,69,70,71,74,75,76,77,78,79,80,81,82],$V31=[8,51,80,81,82],$V41=[1,199],$V51=[1,200],$V61=[59,61,63],$V71=[1,226];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAWHILE":15,"BREAK":16,"CONTINUE":17,"INSTRUCCIONLLAMAR":18,"FUNCION":19,"METODO":20,"FUNCIONPRINTLN":21,"FUNCIONPRINT":22,"FUNCIONTYPEOF":23,"INSTRUCCIONRETURN":24,"BLOQUE":25,";":26,"INSTRUCCIONIFSIMPLE":27,"DECLARACIONNORMAL":28,"DECLARACIONCONSTANTE":29,"TIPODATO":30,"id":31,"igual":32,"EXPRESIONARITMETICA":33,"CONST":34,"INT":35,"STRING":36,"BOOLEAN":37,"DOUBLE":38,"CHAR":39,"IGUALACIONDEDATO":40,"decimal":41,"cadena":42,"booleano":43,"entero":44,"caracter":45,"RESTA":46,"null":47,"IF":48,"parentesisA":49,"EXPRESIONLOGICA":50,"parentesisC":51,"VARIOSIF":52,"SENTENCIAELSEIF":53,"ELSE":54,"SENTENCIAELSEIFSIMPLE":55,"SWITCH":56,"llaveA":57,"CASOS":58,"llaveC":59,"CASO":60,"CASE":61,"dosPuntos":62,"DEFAULT":63,"FOR":64,"VARIABLEFOR":65,"EXPRESIONESRELACIONALES":66,"INCREMENTODECREMENTOFOR":67,"SUMA":68,"MULTIPLICACION":69,"DIVISION":70,"MODULO":71,"POTENCIA":72,"EXPRESIONLLAMAR":73,"mayorQue":74,"mayorIgual":75,"menorQue":76,"menorIgual":77,"igualDoble":78,"diferenteDe":79,"OR":80,"AND":81,"XOR":82,"NOT":83,"FORINCREMENTODECREMENTO":84,"incremento":85,"decremento":86,"SUMARESTA":87,"WHILE":88,"DO":89,"VOID":90,"PARAMETROS":91,"coma":92,"PARAMETRO":93,"PARAMETROSCALL":94,"CALL":95,"RETORNO":96,"PRINTLN":97,"PRINT":98,"TYPEOF":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",16:"BREAK",17:"CONTINUE",26:";",31:"id",32:"igual",34:"CONST",35:"INT",36:"STRING",37:"BOOLEAN",38:"DOUBLE",39:"CHAR",41:"decimal",42:"cadena",43:"booleano",44:"entero",45:"caracter",46:"RESTA",47:"null",48:"IF",49:"parentesisA",51:"parentesisC",54:"ELSE",56:"SWITCH",57:"llaveA",59:"llaveC",61:"CASE",62:"dosPuntos",63:"DEFAULT",64:"FOR",68:"SUMA",69:"MULTIPLICACION",70:"DIVISION",71:"MODULO",72:"POTENCIA",74:"mayorQue",75:"mayorIgual",76:"menorQue",77:"menorIgual",78:"igualDoble",79:"diferenteDe",80:"OR",81:"AND",82:"XOR",83:"NOT",85:"incremento",86:"decremento",88:"WHILE",89:"DO",90:"VOID",92:"coma",95:"CALL",96:"RETORNO",97:"PRINTLN",98:"PRINT",99:"TYPEOF"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[7,1],[7,1],[28,4],[29,5],[9,3],[30,1],[30,1],[30,1],[30,1],[30,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,2],[40,2],[40,1],[11,5],[53,7],[53,3],[53,0],[55,8],[55,4],[55,0],[52,2],[52,3],[12,7],[58,2],[58,1],[60,4],[60,3],[13,8],[65,2],[65,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[50,3],[50,3],[50,3],[50,2],[50,1],[67,1],[67,1],[10,2],[10,2],[10,2],[10,2],[84,3],[87,3],[87,3],[87,1],[87,1],[15,5],[14,7],[20,6],[91,3],[91,1],[91,0],[93,2],[19,6],[94,3],[94,1],[94,0],[18,5],[73,4],[24,1],[24,2],[21,4],[22,4],[23,4],[25,3],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 6: case 12: case 13: case 14: case 17: case 18: case 19: case 20:
 this.$=$$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 15: case 16: case 21: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33:
 this.$=$$[$0]; 
break;
case 22:
 
                //get instance
                //meterlo
                console.log("Error sintactico en la linea"+(yylineno+1)); 
break;
case 34:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 35:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0],false,_$[$0-4].first_line, _$[$0-4].first_column );
break;
case 36:
this.$= new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column );
break;
case 37: case 38: case 39: case 40: case 41: case 73: case 75: case 76: case 77: case 78: case 85: case 90: case 100: case 101:
this.$=$$[$0];
break;
case 42:
this.$=new Literal($$[$0],Tipo.DOUBLE , _$[$0].first_line, _$[$0].first_column)
break;
case 43:
this.$=new Literal($$[$0],Tipo.STRING , _$[$0].first_line, _$[$0].first_column)
break;
case 44:
this.$=new Literal($$[$0],Tipo.BOOLEAN , _$[$0].first_line, _$[$0].first_column)
break;
case 45:
this.$=new Literal($$[$0],Tipo.INT , _$[$0].first_line, _$[$0].first_column)
break;
case 46:
this.$=new Literal($$[$0],Tipo.CHAR , _$[$0].first_line, _$[$0].first_column)
break;
case 47:
this.$=new Literal($$[$0-1]+$$[$0],Tipo.INT , _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 48:
this.$=new Literal($$[$0-1]+$$[$0],Tipo.DOUBLE , _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 49:
this.$=new Literal($$[$0],Tipo.NULL , _$[$0].first_line, _$[$0].first_column)
break;
case 65: case 66:
this.$=$$[$0-1];
break;
case 67: case 98:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68: case 99:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$= new Aritmeticas($$[$0-2],$$[$0],opcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$= new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 79:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$= new Relacional($$[$0-2],$$[$0],opcionesRelacionales.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
this.$= new Logicas($$[$0-2],$$[$0],opcionesLogicas.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$= new Logicas($$[$0],null,opcionesLogicas.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 102:
this.$= new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 103:
this.$= new DoWhile($$[$0-2],$$[$0-5],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 117:
this.$= new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 118:
this.$= new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 120:
this.$= new Bloque($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vo,[2,3]),{8:[1,49]},{8:[1,50]},{8:[1,51]},o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),{8:[1,52]},{8:[1,53]},{8:[1,54]},o($Vo,[2,15]),o($Vo,[2,16]),{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},o($Vo,[2,21]),{26:[1,59]},{8:[2,32]},{8:[2,33]},{32:$Vp,85:$Vq,86:$Vr},{31:[1,63]},{31:[1,64]},{49:[1,65]},{49:[1,66]},{49:[1,67]},{25:68,57:$Vc},{49:[1,69]},{31:[1,70]},{31:[1,71]},{31:[1,72]},{49:[1,73]},{49:[1,74]},{49:[1,75]},{8:[2,115],10:82,23:81,31:$Vs,33:76,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{2:$V0,4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,59:[1,91],64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{30:92,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9},{31:[2,37]},{31:[2,38]},{31:[2,39]},{31:[2,40]},{31:[2,41]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,22]),{10:82,23:81,31:$Vs,33:93,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($VB,[2,96]),{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:94,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{31:[1,98]},{7:100,9:101,28:23,29:24,30:103,31:[1,102],34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,65:99},{88:[1,104]},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:105,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{49:[1,106]},{32:$VD,49:[1,107]},{49:[1,109]},{10:82,23:81,31:$Vs,33:110,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:111,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:112,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{8:[2,116],46:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{10:82,23:81,31:$Vs,33:119,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},o($VB,[2,74],{49:[1,120],85:$Vq,86:$Vr}),o($VB,[2,75]),o($VB,[2,76]),o($VB,[2,77]),o($VB,[2,78]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),{41:[1,122],44:[1,121]},o($VK,[2,49]),{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,59:[1,123],64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($VL,[2,121]),{31:[1,124]},{8:[2,36],46:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{51:[1,125],80:$VM,81:$VN,82:$VO},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:129,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},o($VP,[2,90],{74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV}),o([8,51,74,75,76,77,78,79,80,81,82],[2,85],{46:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),{51:[1,136]},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:137,73:80,85:$Ve,86:$Vf,99:$Vn},{8:[1,138]},{8:[1,139]},{32:$Vp},{31:[1,140]},{49:[1,141]},{51:[1,142],80:$VM,81:$VN,82:$VO},o($VW,$VX,{94:143,40:144,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz}),o($VW,$VY,{91:145,93:146,30:147,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9}),{10:82,23:81,31:$Vs,33:148,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},o($VW,$VY,{93:146,30:147,91:149,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9}),{46:$VE,51:[1,150],68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{46:$VE,51:[1,151],68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{46:$VE,51:[1,152],68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{10:82,23:81,31:$Vs,33:153,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:154,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:155,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:156,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:157,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:158,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},{46:$VE,51:[1,159],68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($VW,$VX,{40:144,94:160,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz}),o($VK,[2,47]),o($VK,[2,48]),o($VL,[2,120]),{32:[1,161]},{7:165,9:166,10:167,16:$VZ,18:168,21:169,22:170,23:171,24:172,25:163,27:164,28:23,29:24,30:103,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,52:162,57:$Vc,85:$Ve,86:$Vf,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:174,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:175,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:176,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},o($VP,[2,89]),{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:177,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:178,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:179,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:180,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:181,73:80,85:$Ve,86:$Vf,99:$Vn},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,66:182,73:80,85:$Ve,86:$Vf,99:$Vn},{57:[1,183]},{8:[1,184],74:$VQ,75:$VR,76:$VS,77:$VT,78:$VU,79:$VV},o($V_,[2,65]),o($V_,[2,66]),{32:$VD},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:185,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{25:186,57:$Vc},{51:[1,187],92:$V$},o($VW,[2,111]),{51:[1,189],92:$V01},o($VW,[2,106]),{31:[1,191]},{8:[2,34],46:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{51:[1,192],92:$V01},{8:[2,117]},{8:[2,118]},o($VB,[2,119]),o($V11,[2,67],{69:$VG,70:$VH,71:$VI,72:$VJ}),o($V11,[2,68],{69:$VG,70:$VH,71:$VI,72:$VJ}),o($V21,[2,69],{72:$VJ}),o($V21,[2,70],{72:$VJ}),o($V21,[2,71],{72:$VJ}),o($VB,[2,72]),o($VB,[2,73]),{51:[1,193],92:$V$},{10:82,23:81,31:$Vs,33:194,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,73:80,85:$Ve,86:$Vf,99:$Vn},o($Vo,[2,50]),o($VL,[2,53],{53:195}),{8:[1,196]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},{8:[2,27]},{8:[2,28]},{8:[2,29]},{8:[2,30]},{8:[2,31]},o([51,80],[2,86],{81:$VN,82:$VO}),o([51,80,81],[2,87],{82:$VO}),o($VP,[2,88]),o($V31,[2,79]),o($V31,[2,80]),o($V31,[2,81]),o($V31,[2,82]),o($V31,[2,83]),o($V31,[2,84]),{58:197,60:198,61:$V41,63:$V51},{10:202,31:[1,204],67:201,84:203,85:$Ve,86:$Vf},{51:[1,205],80:$VM,81:$VN,82:$VO},o($Vo,[2,102]),{8:[2,113]},{40:206,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz},{25:207,57:$Vc},{30:147,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,93:208},o($VW,[2,108]),{25:209,57:$Vc},o($VB,[2,114]),{8:[2,35],46:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($Vo,[2,57],{54:[1,210]}),o($VL,[2,56],{55:211}),{59:[1,212],60:213,61:$V41,63:$V51},o($V61,[2,61]),{40:214,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz},{62:[1,215]},{51:[1,216]},{51:[2,91]},{51:[2,92]},{32:[1,217],85:$Vq,86:$Vr},{25:218,57:$Vc},o($VW,[2,110]),o($Vo,[2,109]),o($VW,[2,105]),o($Vo,[2,104]),{25:220,48:[1,219],57:$Vc},o($Vo,[2,58],{54:[1,221]}),o($Vo,[2,59]),o($V61,[2,60]),{62:[1,222]},{2:$V0,4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{25:224,57:$Vc},{31:$V71,40:227,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,87:225},o($Vo,[2,103]),{49:[1,228]},o($VL,[2,52]),{7:165,9:166,10:167,16:$VZ,18:168,21:169,22:170,23:171,24:172,27:230,28:23,29:24,30:103,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:[1,229],85:$Ve,86:$Vf,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{2:$V0,4:231,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($V61,[2,63],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,6:48,2:$V0,16:$V1,17:$V2,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn}),o($Vo,[2,64]),{51:[2,97]},{46:[1,233],51:[2,100],68:[1,232]},{51:[2,101]},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:234,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},{49:[1,235]},{8:[1,236]},o($V61,[2,62],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:23,29:24,30:34,6:48,2:$V0,16:$V1,17:$V2,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,48:$Va,56:$Vb,57:$Vc,64:$Vd,85:$Ve,86:$Vf,88:$Vg,89:$Vh,90:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn}),{31:$V71,40:227,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,87:237},{31:$V71,40:227,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,87:238},{51:[1,239],80:$VM,81:$VN,82:$VO},{10:82,23:81,31:$Vs,33:97,40:79,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,49:$VA,50:240,66:96,73:80,83:$VC,85:$Ve,86:$Vf,99:$Vn},o($VL,[2,55]),{51:[2,98]},{51:[2,99]},{25:241,57:$Vc},{51:[1,242],80:$VM,81:$VN,82:$VO},o($VL,[2,51]),{7:165,9:166,10:167,16:$VZ,18:168,21:169,22:170,23:171,24:172,27:243,28:23,29:24,30:103,31:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,85:$Ve,86:$Vf,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{8:[1,244]},o($VL,[2,54])],
defaultActions: {23:[2,32],24:[2,33],42:[2,37],43:[2,38],44:[2,39],45:[2,40],46:[2,41],47:[2,1],150:[2,117],151:[2,118],165:[2,23],166:[2,24],167:[2,25],168:[2,26],169:[2,27],170:[2,28],171:[2,29],172:[2,30],173:[2,31],187:[2,113],202:[2,91],203:[2,92],225:[2,97],227:[2,101],237:[2,98],238:[2,99]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Declaracion} = require('../instrucciones/declaracion')
    const {Literal} = require('../expresiones/literal')
    const {Tipo} = require('../simbolos/tipo');
    const {Aritmeticas} = require('../expresiones/aritmeticas');
    const {opcionesAritmeticas} = require('../expresiones/opcionesAritmeticas');
    const {Logicas} = require('../expresiones/logicas');
    const {opcionesLogicas} = require('../expresiones/opcionesLogicas');
    const {Relacional} = require('../expresiones/relacional');
    const {opcionesRelacionales} = require('../expresiones/opcionesRelacionales');
    const {Acceso} = require('../expresiones/acceso');
    const {Asignar} = require('../instrucciones/asignar');
    const {Print} = require('../instrucciones/print');
    const {Println} = require('../instrucciones/println');
    const {Bloque} = require('../instrucciones/bloque');
    const {While} = require('../instrucciones/while');
    const {DoWhile} = require('../instrucciones/dowhile');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                        console.log("Comentario una línea");
                                    
break;
case 2:
                                        console.log("Comentario multi");
                                    
break;
case 3:
                                        return 42;
                                    
break;
case 4:
                                        return 45;
                                    
break;
case 5:
                                        return 41;
                                    
break;
case 6:
                                        return 44;
                                    
break;
case 7:
                                        return 43;
                                    
break;
case 8:
                                        return 35;
                                    
break;
case 9:
                                        return 36;
                                    
break;
case 10:
                                        return 37;
                                    
break;
case 11:
                                        return 38;
                                    
break;
case 12:
                                        return 39;
                                    
break;
case 13:
                                        return 34;
                                    
break;
case 14:
                                        return 48;
                                    
break;
case 15:
                                        return 54;
                                    
break;
case 16:
                                        return 56;
                                    
break;
case 17:
                                        return 61;
                                    
break;
case 18:
                                        return 63;
                                    
break;
case 19:
                                        return 16;
                                    
break;
case 20:
                                        return 64;
                                    
break;
case 21:
                                        return 89;
                                    
break;
case 22:
                                        return 88;
                                    
break;
case 23:
                                        return 17;
                                    
break;
case 24:
                                        return 90;
                                    
break;
case 25:
                                        return 95;
                                    
break;
case 26:
                                        return 47;
                                    
break;
case 27:
                                        return 96;
                                    
break;
case 28:
                                        return 97;
                                    
break;
case 29:
                                        return 98;
                                    
break;
case 30:
                                        return 99;
                                    
break;
case 31:
                                        return 31;
                                    
break;
case 32:
                                        return 78
                                    
break;
case 33:
                                        return 32
                                    
break;
case 34:
                                        return 79
                                    
break;
case 35:
                                        return 77
                                    
break;
case 36:
                                        return 75
                                    
break;
case 37:
                                        return 76
                                    
break;
case 38:
                                        return 74
                                    
break;
case 39:
                                        return 'interrogacionCierra'
                                    
break;
case 40:
                                        return 62
                                    
break;
case 41:
                                        return 83
                                    
break;
case 42:
                                        return 80
                                    
break;
case 43:
                                        return 81
                                    
break;
case 44:
                                        return 82
                                    
break;
case 45:
                                        return 49
                                    
break;
case 46:
                                        return 51
                                    
break;
case 47:
                                        return 8
                                    
break;
case 48:
                                        return 92
                                    
break;
case 49:
                                        return 85
                                    
break;
case 50:
                                        return 86
                                    
break;
case 51:
                                        return 68
                                    
break;
case 52:
                                        return 46
                                    
break;
case 53:
                                        return 70
                                    
break;
case 54:
                                        return 72
                                    
break;
case 55:
                                        return 69
                                    
break;
case 56:
                                        return 71
                                    
break;
case 57:
                                        return 57
                                    
break;
case 58:
                                        return 59
                                    
break;
case 59:
                                        return 'corcheteA'
                                    
break;
case 60:
                                        return 'corcheteC'
                                    
break;
case 61:
break;
case 62:
break;
case 63:return 5;
break;
case 64:
                                        //let error = new Errores(yy_.yylloc.first_line,  yy_.yylloc.first_column, "La expresión " + yy_.yytext + " no pertenece al lenguaje", "Léxico")
                                        console.log("ERROR LEXICO EN LA LINEA "+ yy_.yylloc.first_line + "Y EN LA COLUMNA "+yy_.yylloc.first_column + " EL TEXTO ES "+ yy_.yytext);
                                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:("(\\"|\\r|\\\\|\\n|\\t|[^\"])*"))/i,/^(?:('(\\"|\\r|\\\\|\\n|\\t|[^\'])?'))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}