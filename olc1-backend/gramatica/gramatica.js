/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,38],$V3=[1,24],$V4=[1,39],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,43],$V9=[1,25],$Va=[1,26],$Vb=[1,37],$Vc=[1,27],$Vd=[1,29],$Ve=[1,28],$Vf=[1,32],$Vg=[1,30],$Vh=[1,36],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[5,16,17,33,34,36,37,38,39,40,48,56,57,59,61,63,64,88,89,90,94,95,96,97,98],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,72],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[8,51],$Vx=[31,35],$Vy=[2,36],$Vz=[1,107],$VA=[1,108],$VB=[1,109],$VC=[1,110],$VD=[1,111],$VE=[1,112],$VF=[8,51,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83],$VG=[1,113],$VH=[8,35,51,62,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[51,81,82,83],$VM=[1,120],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[35,51],$VT=[2,105],$VU=[2,100],$VV=[5,16,17,33,34,36,37,38,39,40,48,54,56,57,59,61,63,64,88,89,90,94,95,96,97,98],$VW=[34,42,43,44,45,46,47,98],$VX=[1,173],$VY=[1,175],$VZ=[8,51,68,69,75,76,77,78,79,80,81,82,83],$V_=[8,51,68,69,70,71,72,75,76,77,78,79,80,81,82,83],$V$=[8,51,81,82,83],$V01=[1,183],$V11=[1,184],$V21=[59,61,63],$V31=[1,208];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAWHILE":15,"BREAK":16,"CONTINUE":17,"INSTRUCCIONLLAMAR":18,"FUNCION":19,"METODO":20,"FUNCIONPRINTLN":21,"FUNCIONPRINT":22,"FUNCIONTYPEOF":23,"INSTRUCCIONRETURN":24,"BLOQUE":25,"INSTRUCCIONIFSIMPLE":26,"DECLARACIONNORMAL":27,"DECLARACIONCONSTANTE":28,"TIPODATO":29,"IDS":30,"igual":31,"EXPRESIONARITMETICA":32,"CONST":33,"id":34,"coma":35,"INT":36,"STRING":37,"BOOLEAN":38,"DOUBLE":39,"CHAR":40,"IGUALACIONDEDATO":41,"entero":42,"cadena":43,"booleano":44,"decimal":45,"caracter":46,"null":47,"IF":48,"parentesisA":49,"EXPRESIONLOGICA":50,"parentesisC":51,"VARIOSIF":52,"SENTENCIAELSEIF":53,"ELSE":54,"SENTENCIAELSEIFSIMPLE":55,"SWITCH":56,"llaveA":57,"CASOS":58,"llaveC":59,"CASO":60,"CASE":61,"dosPuntos":62,"DEFAULT":63,"FOR":64,"VARIABLEFOR":65,"EXPRESIONESRELACIONALES":66,"INCREMENTODECREMENTOFOR":67,"SUMA":68,"RESTA":69,"MULTIPLICACION":70,"DIVISION":71,"MODULO":72,"POTENCIA":73,"EXPRESIONLLAMAR":74,"mayorQue":75,"mayorIgual":76,"menorQue":77,"menorIgual":78,"igualDoble":79,"diferenteDe":80,"OR":81,"AND":82,"XOR":83,"FORINCREMENTODECREMENTO":84,"incremento":85,"decremento":86,"SUMARESTA":87,"WHILE":88,"DO":89,"VOID":90,"PARAMETROS":91,"PARAMETRO":92,"PARAMETROSCALL":93,"CALL":94,"RETORNO":95,"PRINTLN":96,"PRINT":97,"TYPEOF":98,"TYPEOFEXPRE":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",16:"BREAK",17:"CONTINUE",31:"igual",33:"CONST",34:"id",35:"coma",36:"INT",37:"STRING",38:"BOOLEAN",39:"DOUBLE",40:"CHAR",42:"entero",43:"cadena",44:"booleano",45:"decimal",46:"caracter",47:"null",48:"IF",49:"parentesisA",51:"parentesisC",54:"ELSE",56:"SWITCH",57:"llaveA",59:"llaveC",61:"CASE",62:"dosPuntos",63:"DEFAULT",64:"FOR",68:"SUMA",69:"RESTA",70:"MULTIPLICACION",71:"DIVISION",72:"MODULO",73:"POTENCIA",75:"mayorQue",76:"mayorIgual",77:"menorQue",78:"menorIgual",79:"igualDoble",80:"diferenteDe",81:"OR",82:"AND",83:"XOR",85:"incremento",86:"decremento",88:"WHILE",89:"DO",90:"VOID",94:"CALL",95:"RETORNO",96:"PRINTLN",97:"PRINT",98:"TYPEOF"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[7,1],[7,1],[27,4],[28,2],[9,3],[30,3],[30,1],[29,1],[29,1],[29,1],[29,1],[29,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[11,5],[53,7],[53,3],[53,0],[55,8],[55,4],[55,0],[52,2],[52,3],[12,7],[58,2],[58,1],[60,4],[60,3],[13,8],[65,2],[65,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[50,3],[50,3],[50,3],[50,1],[67,1],[67,1],[10,2],[10,2],[84,3],[87,3],[87,3],[87,1],[87,1],[15,5],[14,3],[20,6],[91,3],[91,1],[91,0],[92,2],[19,6],[93,3],[93,1],[93,0],[18,5],[74,4],[24,1],[24,2],[21,4],[22,4],[23,4],[99,1],[99,1],[99,1],[25,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine el an√°lisis");
break;
case 32:
console.log($$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 34:
console.log($$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 35:
 $$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 36:
this.$ = [$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{1:[3]},{5:[1,44],6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},o($Vl,[2,3]),{8:[1,46]},{8:[1,47]},{8:[1,48]},o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),{8:[1,49]},{8:[1,50]},{8:[1,51]},o($Vl,[2,15]),o($Vl,[2,16]),{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},o($Vl,[2,21]),{8:[2,30]},{8:[2,31]},{31:$Vm,85:$Vn,86:$Vo},{49:[1,59]},{49:[1,60]},{49:[1,61]},{25:62,57:$Vb},{49:[1,63]},{34:[1,64]},{30:66,34:[1,65]},{34:[1,67]},{49:[1,68]},{49:[1,69]},{49:[1,70]},{8:[2,108],23:75,32:71,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{4:82,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{27:83,29:84,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8},{34:[2,37]},{34:[2,38]},{34:[2,39]},{34:[2,40]},{34:[2,41]},{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),{23:75,32:85,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},o($Vw,[2,88]),o($Vw,[2,89]),{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:86,66:87,74:74,98:$Vk},{34:[1,89]},{7:91,9:92,27:22,28:23,29:84,33:$V2,34:[1,93],36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,65:90},{15:94,88:$Vd},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:95,66:87,74:74,98:$Vk},{49:[1,96]},o($Vx,$Vy,{49:[1,97]}),{31:[1,98],35:[1,99]},{49:[1,100]},{23:75,32:101,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:102,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{34:[1,104],41:105,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:106,99:103},{8:[2,109],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VF,[2,71],{49:$VG}),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,59:[1,114],64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{8:[2,33]},{30:66,34:[1,115]},{8:[2,34],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{51:[1,116],81:$VI,82:$VJ,83:$VK},o($VL,[2,85],{75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o([8,51,75,76,77,78,79,80,81,82,83],[2,81],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{51:[1,126]},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:127,74:74,98:$Vk},{8:[1,128]},{8:[1,129]},{31:$Vm},o($Vl,[2,96]),{51:[1,130],81:$VI,82:$VJ,83:$VK},o($VS,$VT,{93:131,41:132,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VS,$VU,{91:133,92:134,29:135,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8}),{23:75,32:136,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{34:[1,137]},o($VS,$VU,{92:134,29:135,91:138,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8}),{51:[1,139],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{51:[1,140],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{51:[1,141]},{49:$VG,51:[2,113]},{51:[2,114]},{51:[2,115]},{23:75,32:142,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:143,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:144,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:145,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:146,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},{23:75,32:147,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,74:74,98:$Vk},o($VS,$VT,{41:132,93:148,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VV,[2,116]),o($Vx,$Vy),{7:152,9:153,10:154,18:155,21:156,22:157,23:158,24:159,25:150,26:151,27:22,28:23,29:84,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,52:149,57:$Vb,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:160,66:87,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:161,66:87,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:162,66:87,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:163,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:164,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:165,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:166,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:167,74:74,98:$Vk},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,66:168,74:74,98:$Vk},{57:[1,169]},{8:[1,170],75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($VW,[2,63]),o($VW,[2,64]),{25:171,57:$Vb},{35:$VX,51:[1,172]},o($VS,[2,104]),{35:$VY,51:[1,174]},o($VS,[2,99]),{34:[1,176]},{8:[2,32],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($Vx,[2,35]),{35:$VY,51:[1,177]},{8:[2,110]},{8:[2,111]},o($VF,[2,112]),o($VZ,[2,65],{70:$VB,71:$VC,72:$VD,73:$VE}),o($VZ,[2,66],{70:$VB,71:$VC,72:$VD,73:$VE}),o($V_,[2,67],{73:$VE}),o($V_,[2,68],{73:$VE}),o($V_,[2,69],{73:$VE}),o($VF,[2,70]),{35:$VX,51:[1,178]},o($Vl,[2,48]),o($VV,[2,51],{53:179}),{8:[1,180]},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},{8:[2,27]},{8:[2,28]},{8:[2,29]},o([51,81],[2,82],{82:$VJ,83:$VK}),o([51,81,82],[2,83],{83:$VK}),o($VL,[2,84]),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),o($V$,[2,78]),o($V$,[2,79]),o($V$,[2,80]),{58:181,60:182,61:$V01,63:$V11},{10:186,34:[1,188],67:185,84:187},o($Vl,[2,95]),{8:[2,106]},{41:189,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv},{25:190,57:$Vb},{29:135,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,92:191},o($VS,[2,101]),{25:192,57:$Vb},o($VF,[2,107]),o($Vl,[2,55],{54:[1,193]}),o($VV,[2,54],{55:194}),{59:[1,195],60:196,61:$V01,63:$V11},o($V21,[2,59]),{41:197,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv},{62:[1,198]},{51:[1,199]},{51:[2,86]},{51:[2,87]},{31:[1,200],85:$Vn,86:$Vo},o($VS,[2,103]),o($Vl,[2,102]),o($VS,[2,98]),o($Vl,[2,97]),{25:202,48:[1,201],57:$Vb},o($Vl,[2,56],{54:[1,203]}),o($Vl,[2,57]),o($V21,[2,58]),{62:[1,204]},{4:205,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{25:206,57:$Vb},{34:$V31,41:209,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,87:207},{49:[1,210]},o($VV,[2,50]),{7:152,9:153,10:154,18:155,21:156,22:157,23:158,24:159,26:212,27:22,28:23,29:84,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:[1,211],94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{4:213,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},o($V21,[2,61],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,6:45,16:$V0,17:$V1,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk}),o($Vl,[2,62]),{51:[2,90]},{51:[2,93],68:[1,214],69:[1,215]},{51:[2,94]},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:216,66:87,74:74,98:$Vk},{49:[1,217]},{8:[1,218]},o($V21,[2,60],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:22,28:23,29:31,6:45,16:$V0,17:$V1,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,48:$V9,56:$Va,57:$Vb,64:$Vc,88:$Vd,89:$Ve,90:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk}),{34:$V31,41:209,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,87:219},{34:$V31,41:209,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,87:220},{51:[1,221],81:$VI,82:$VJ,83:$VK},{23:75,32:88,34:$Vp,41:73,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,50:222,66:87,74:74,98:$Vk},o($VV,[2,53]),{51:[2,91]},{51:[2,92]},{25:223,57:$Vb},{51:[1,224],81:$VI,82:$VJ,83:$VK},o($VV,[2,49]),{7:152,9:153,10:154,18:155,21:156,22:157,23:158,24:159,26:225,27:22,28:23,29:84,33:$V2,34:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk},{8:[1,226]},o($VV,[2,52])],
defaultActions: {22:[2,30],23:[2,31],39:[2,37],40:[2,38],41:[2,39],42:[2,40],43:[2,41],44:[2,1],83:[2,33],105:[2,114],106:[2,115],139:[2,110],140:[2,111],152:[2,22],153:[2,23],154:[2,24],155:[2,25],156:[2,26],157:[2,27],158:[2,28],159:[2,29],172:[2,106],186:[2,86],187:[2,87],207:[2,90],209:[2,94],219:[2,91],220:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //const {Declaracion} = require('../instrucciones/declaracion')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                        console.log("Comentario una l√≠nea");
                                    
break;
case 2:
                                        console.log("Comentario multi");
                                    
break;
case 3:
                                        return 43;
                                    
break;
case 4:
                                        return 46;
                                    
break;
case 5:
                                        return 45;
                                    
break;
case 6:
                                        return 42;
                                    
break;
case 7:
                                        return 44;
                                    
break;
case 8:
                                        return 36;
                                    
break;
case 9:
                                        return 37;
                                    
break;
case 10:
                                        return 38;
                                    
break;
case 11:
                                        return 39;
                                    
break;
case 12:
                                        return 40;
                                    
break;
case 13:
                                        return 33;
                                    
break;
case 14:
                                        return 48;
                                    
break;
case 15:
                                        return 54;
                                    
break;
case 16:
                                        return 56;
                                    
break;
case 17:
                                        return 61;
                                    
break;
case 18:
                                        return 63;
                                    
break;
case 19:
                                        return 16;
                                    
break;
case 20:
                                        return 64;
                                    
break;
case 21:
                                        return 89;
                                    
break;
case 22:
                                        return 88;
                                    
break;
case 23:
                                        return 17;
                                    
break;
case 24:
                                        return 90;
                                    
break;
case 25:
                                        return 94;
                                    
break;
case 26:
                                        return 47;
                                    
break;
case 27:
                                        return 95;
                                    
break;
case 28:
                                        return 96;
                                    
break;
case 29:
                                        return 97;
                                    
break;
case 30:
                                        return 98;
                                    
break;
case 31:
                                        return 34;
                                    
break;
case 32:
                                        return 'comillaDoble'
                                    
break;
case 33:
                                        return 'barraInvertida'
                                    
break;
case 34:
                                        return 'saltoLinea'
                                    
break;
case 35:
                                        return 'retornoCarro'
                                    
break;
case 36:
                                        return 'tabulacion'
                                    
break;
case 37:
                                        return 79
                                    
break;
case 38:
                                        return 31
                                    
break;
case 39:
                                        return 80
                                    
break;
case 40:
                                        return 77
                                    
break;
case 41:
                                        return 75
                                    
break;
case 42:
                                        return 78
                                    
break;
case 43:
                                        return 76
                                    
break;
case 44:
                                        return 'interrogacionCierra'
                                    
break;
case 45:
                                        return 62
                                    
break;
case 46:
                                        return 'NOT'
                                    
break;
case 47:
                                        return 81
                                    
break;
case 48:
                                        return 82
                                    
break;
case 49:
                                        return 83
                                    
break;
case 50:
                                        return 49
                                    
break;
case 51:
                                        return 51
                                    
break;
case 52:
                                        return 8
                                    
break;
case 53:
                                        return 35
                                    
break;
case 54:
                                        return 85
                                    
break;
case 55:
                                        return 86
                                    
break;
case 56:
                                        return 68
                                    
break;
case 57:
                                        return 69
                                    
break;
case 58:
                                        return 71
                                    
break;
case 59:
                                        return 70
                                    
break;
case 60:
                                        return 72
                                    
break;
case 61:
                                        return 73
                                    
break;
case 62:
                                        return 57
                                    
break;
case 63:
                                        return 59
                                    
break;
case 64:
                                        return 'corcheteA'
                                    
break;
case 65:
                                        return 'corcheteC'
                                    
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:
                                        let aux = new moduloErrores.ErrorCST("L√©xico", "La expresi√≥n " + yy_.yytext + " no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column);
                                        errores.push(aux);
                                        console.log("Error l√©xico");
                                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\*\*)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}