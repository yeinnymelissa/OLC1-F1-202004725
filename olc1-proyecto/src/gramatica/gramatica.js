/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,20],$V2=[1,14],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,15],$Ve=[1,16],$Vf=[1,17],$Vg=[5,15,22,23,25,26,27,28,29,31,32,33,34,35,36,44,46,49,51,52],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[2,55],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[5,8,15,22,23,25,26,27,28,29,31,32,33,34,35,36,39,44,46,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$Vs=[5,8,15,22,23,25,26,27,28,29,31,32,33,34,35,36,39,44,46,49,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$Vt=[1,53],$Vu=[8,39],$Vv=[21,24],$Vw=[5,8,15,22,23,25,26,27,28,29,31,32,33,34,35,36,39,44,46,49,51,52,56,57,62,63,64,65,66,67,68,69,70],$Vx=[5,8,15,22,23,25,26,27,28,29,31,32,33,34,35,36,39,44,46,49,51,52,56,57,58,59,60,62,63,64,65,66,67,68,69,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[39,68,69,70],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,92],$VJ=[23,31,32,33,34,35],$VK=[8,39,68,69,70],$VL=[1,108],$VM=[1,109],$VN=[5,15,22,23,25,26,27,28,29,31,32,33,34,35,36,42,44,46,49,51,52],$VO=[44,49,51],$VP=[1,128];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"EXPRESIONARITMETICA":14,"BREAK":15,"INSTRUCCIONIFSIMPLE":16,"DECLARACIONNORMAL":17,"DECLARACIONCONSTANTE":18,"TIPODATO":19,"IDS":20,"igual":21,"CONST":22,"id":23,"coma":24,"INT":25,"STRING":26,"BOOLEAN":27,"DOUBLE":28,"CHAR":29,"IGUALACIONDEDATO":30,"entero":31,"cadena":32,"booleano":33,"decimal":34,"caracter":35,"IF":36,"parentesisA":37,"EXPRESIONLOGICA":38,"parentesisC":39,"VARIOSIF":40,"SENTENCIAELSEIF":41,"ELSE":42,"llaveA":43,"llaveC":44,"SENTENCIAELSEIFSIMPLE":45,"SWITCH":46,"CASOS":47,"CASO":48,"CASE":49,"dosPuntos":50,"DEFAULT":51,"FOR":52,"VARIABLEFOR":53,"EXPRESIONESRELACIONALES":54,"INCREMENTODECREMENTOFOR":55,"SUMA":56,"RESTA":57,"MULTIPLICACION":58,"DIVISION":59,"MODULO":60,"POTENCIA":61,"mayorQue":62,"mayorIgual":63,"menorQue":64,"menorIgual":65,"igualDoble":66,"diferenteDe":67,"OR":68,"AND":69,"XOR":70,"FORINCREMENTODECREMENTO":71,"incremento":72,"decremento":73,"SUMARESTA":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",15:"BREAK",21:"igual",22:"CONST",23:"id",24:"coma",25:"INT",26:"STRING",27:"BOOLEAN",28:"DOUBLE",29:"CHAR",31:"entero",32:"cadena",33:"booleano",34:"decimal",35:"caracter",36:"IF",37:"parentesisA",39:"parentesisC",42:"ELSE",43:"llaveA",44:"llaveC",46:"SWITCH",49:"CASE",50:"dosPuntos",51:"DEFAULT",52:"FOR",56:"SUMA",57:"RESTA",58:"MULTIPLICACION",59:"DIVISION",60:"MODULO",61:"POTENCIA",62:"mayorQue",63:"mayorIgual",64:"menorQue",65:"menorIgual",66:"igualDoble",67:"diferenteDe",68:"OR",69:"AND",70:"XOR",72:"incremento",73:"decremento"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[16,1],[16,1],[16,1],[7,1],[7,1],[17,4],[18,2],[9,3],[20,3],[20,1],[19,1],[19,1],[19,1],[19,1],[19,1],[30,1],[30,1],[30,1],[30,1],[30,1],[11,5],[41,9],[41,5],[41,0],[45,8],[45,4],[45,0],[40,4],[40,3],[12,7],[47,2],[47,1],[48,4],[48,3],[13,10],[53,2],[53,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[14,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[38,3],[38,3],[38,3],[38,1],[55,1],[55,1],[10,2],[10,2],[71,3],[74,3],[74,3],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine el an√°lisis");
break;
case 17:
console.log($$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 19:
console.log($$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 20:
 $$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 21:
this.$ = [$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},o($Vg,[2,3]),{8:[1,33]},{8:[1,34]},{8:[1,35]},o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10],{56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm}),{8:[1,42]},{8:[2,15]},{8:[2,16]},o([5,15,22,23,25,26,27,28,29,31,32,33,34,35,36,44,46,49,51,52,56,57,58,59,60,61],$Vn,{21:$Vo,72:$Vp,73:$Vq}),{37:[1,46]},{37:[1,47]},{37:[1,48]},o($Vr,[2,56]),{20:49,23:[1,50]},{17:51,19:19,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},o($Vs,[2,27]),o($Vs,[2,28]),o($Vs,[2,29]),o($Vs,[2,30]),o($Vs,[2,31]),{23:[2,22]},{23:[2,23]},{23:[2,24]},{23:[2,25]},{23:[2,26]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{14:52,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{14:54,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{14:55,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{14:56,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{14:57,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{14:58,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},o($Vg,[2,11]),{14:59,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},o($Vu,[2,70]),o($Vu,[2,71]),{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:60,54:61},{23:[1,63]},{7:65,9:66,17:12,18:13,19:19,22:$V1,23:[1,67],25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,53:64},{21:[1,68],24:[1,69]},o($Vv,[2,21]),{8:[2,18]},o($Vw,[2,49],{58:$Vj,59:$Vk,60:$Vl,61:$Vm}),o($Vr,$Vn),o($Vw,[2,50],{58:$Vj,59:$Vk,60:$Vl,61:$Vm}),o($Vx,[2,51],{61:$Vm}),o($Vx,[2,52],{61:$Vm}),o($Vx,[2,53],{61:$Vm}),o($Vr,[2,54]),{8:[2,19],56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm},{39:[1,70],68:$Vy,69:$Vz,70:$VA},o($VB,[2,67],{62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH}),o([8,39,62,63,64,65,66,67,68,69,70],[2,63],{56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm}),{39:[1,80]},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:81},{8:[1,82]},{8:[1,83]},{21:$Vo},{14:84,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{23:[1,85]},{7:89,9:90,10:91,16:88,17:12,18:13,19:19,22:$V1,23:$VI,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,40:86,43:[1,87]},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:93,54:61},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:94,54:61},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:95,54:61},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:96},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:97},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:98},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:99},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:100},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,54:101},{43:[1,102]},{8:[1,103],62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH},o($VJ,[2,47]),o($VJ,[2,48]),{8:[2,17],56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm},o($Vv,[2,20]),o($Vg,[2,32]),{4:104,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},{8:[1,105]},{8:[2,12]},{8:[2,13]},{8:[2,14]},{21:$Vo,72:$Vp,73:$Vq},o([39,68],[2,64],{69:$Vz,70:$VA}),o([39,68,69],[2,65],{70:$VA}),o($VB,[2,66]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),{47:106,48:107,49:$VL,51:$VM},{10:111,23:[1,113],55:110,71:112},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,44:[1,114],46:$Ve,52:$Vf},o($VN,[2,38],{45:115}),{44:[1,116],48:117,49:$VL,51:$VM},o($VO,[2,43]),{30:118,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc},{50:[1,119]},{39:[1,120]},{39:[2,68]},{39:[2,69]},{21:[1,121],72:$Vp,73:$Vq},o($VN,[2,35],{41:122}),o($Vg,[2,40],{42:[1,123]}),o($Vg,[2,41]),o($VO,[2,42]),{50:[1,124]},{4:125,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},{43:[1,126]},{23:$VP,30:129,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,74:127},o($Vg,[2,39],{42:[1,130]}),{7:89,9:90,10:91,16:132,17:12,18:13,19:19,22:$V1,23:$VI,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,36:[1,131]},{4:133,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},o($VO,[2,45],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,17:12,18:13,30:18,19:19,6:32,15:$V0,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf}),{4:134,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},{39:[2,72]},{39:[2,75],56:[1,135],57:[1,136]},{39:[2,76]},{36:[1,137],43:[1,138]},{37:[1,139]},{8:[1,140]},o($VO,[2,44],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,17:12,18:13,30:18,19:19,6:32,15:$V0,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf}),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,44:[1,141],46:$Ve,52:$Vf},{23:$VP,30:129,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,74:142},{23:$VP,30:129,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,74:143},{37:[1,144]},{4:145,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:146,54:61},o($VN,[2,37]),o($Vg,[2,46]),{39:[2,73]},{39:[2,74]},{14:62,23:$Vt,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,38:147,54:61},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,44:[1,148],46:$Ve,52:$Vf},{39:[1,149],68:$Vy,69:$Vz,70:$VA},{39:[1,150],68:$Vy,69:$Vz,70:$VA},o($VN,[2,34]),{7:89,9:90,10:91,16:151,17:12,18:13,19:19,22:$V1,23:$VI,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},{43:[1,152]},{8:[1,153]},{4:154,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,46:$Ve,52:$Vf},o($VN,[2,36]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V0,17:12,18:13,19:19,22:$V1,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:18,31:$V8,32:$V9,33:$Va,34:$Vb,35:$Vc,36:$Vd,44:[1,155],46:$Ve,52:$Vf},o($VN,[2,33])],
defaultActions: {12:[2,15],13:[2,16],26:[2,22],27:[2,23],28:[2,24],29:[2,25],30:[2,26],31:[2,1],51:[2,18],89:[2,12],90:[2,13],91:[2,14],111:[2,68],112:[2,69],127:[2,72],129:[2,76],142:[2,73],143:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                        console.log("Comentario una l√≠nea");
                                    
break;
case 2:
                                        console.log("Comentario multi");
                                    
break;
case 3:
                                        return 32;
                                    
break;
case 4:
                                        return 35;
                                    
break;
case 5:
                                        return 34;
                                    
break;
case 6:
                                        return 31;
                                    
break;
case 7:
                                        return 33;
                                    
break;
case 8:
                                        return 25;
                                    
break;
case 9:
                                        return 26;
                                    
break;
case 10:
                                        return 27;
                                    
break;
case 11:
                                        return 28;
                                    
break;
case 12:
                                        return 29;
                                    
break;
case 13:
                                        return 22;
                                    
break;
case 14:
                                        return 36;
                                    
break;
case 15:
                                        return 42;
                                    
break;
case 16:
                                        return 46;
                                    
break;
case 17:
                                        return 49;
                                    
break;
case 18:
                                        return 51;
                                    
break;
case 19:
                                        return 15;
                                    
break;
case 20:
                                        return 52;
                                    
break;
case 21:
                                        return 23;
                                    
break;
case 22:
                                        return 'comillaDoble'
                                    
break;
case 23:
                                        return 'barraInvertida'
                                    
break;
case 24:
                                        return 'saltoLinea'
                                    
break;
case 25:
                                        return 'retornoCarro'
                                    
break;
case 26:
                                        return 'tabulacion'
                                    
break;
case 27:
                                        return 66
                                    
break;
case 28:
                                        return 21
                                    
break;
case 29:
                                        return 67
                                    
break;
case 30:
                                        return 64
                                    
break;
case 31:
                                        return 62
                                    
break;
case 32:
                                        return 65
                                    
break;
case 33:
                                        return 63
                                    
break;
case 34:
                                        return 'interrogacionCierra'
                                    
break;
case 35:
                                        return 50
                                    
break;
case 36:
                                        return 'NOT'
                                    
break;
case 37:
                                        return 68
                                    
break;
case 38:
                                        return 69
                                    
break;
case 39:
                                        return 70
                                    
break;
case 40:
                                        return 37
                                    
break;
case 41:
                                        return 39
                                    
break;
case 42:
                                        return 8
                                    
break;
case 43:
                                        return 24
                                    
break;
case 44:
                                        return 72
                                    
break;
case 45:
                                        return 73
                                    
break;
case 46:
                                        return 56
                                    
break;
case 47:
                                        return 57
                                    
break;
case 48:
                                        return 59
                                    
break;
case 49:
                                        return 58
                                    
break;
case 50:
                                        return 60
                                    
break;
case 51:
                                        return 61
                                    
break;
case 52:
                                        return 43
                                    
break;
case 53:
                                        return 44
                                    
break;
case 54:
                                        return 'corcheteA'
                                    
break;
case 55:
                                        return 'corcheteC'
                                    
break;
case 56:
break;
case 57:
break;
case 58:return 5;
break;
case 59:
                                        let aux = new moduloErrores.ErrorCST("L√©xico", "La expresi√≥n " + yy_.yytext + " no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column);
                                        errores.push(aux);
                                        console.log("Error l√©xico");
                                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\*\*)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}