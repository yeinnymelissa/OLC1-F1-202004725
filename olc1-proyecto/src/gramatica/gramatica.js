/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,36],$V3=[1,23],$V4=[1,37],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,41],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,28],$Vd=[1,27],$Ve=[1,31],$Vf=[1,29],$Vg=[1,35],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[5,16,17,32,33,35,36,37,38,39,47,55,57,60,62,63,87,88,89,93,94,95,96,97],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,70],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[8,50],$Vw=[30,34],$Vx=[2,35],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[8,50,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82],$VF=[1,110],$VG=[8,34,50,61,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[50,80,81,82],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[34,50],$VS=[2,104],$VT=[2,99],$VU=[33,41,42,43,44,45,46,97],$VV=[1,171],$VW=[1,173],$VX=[8,50,67,68,74,75,76,77,78,79,80,81,82],$VY=[8,50,67,68,69,70,71,74,75,76,77,78,79,80,81,82],$VZ=[8,50,80,81,82],$V_=[1,181],$V$=[1,182],$V01=[5,16,17,32,33,35,36,37,38,39,47,53,55,57,60,62,63,87,88,89,93,94,95,96,97],$V11=[55,60,62],$V21=[1,209];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ptComa":8,"ASIGNACION":9,"INCREMENTODECREMENTO":10,"SENTENCIAIF":11,"SENTENCIASWITCH":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAWHILE":15,"BREAK":16,"CONTINUE":17,"INSTRUCCIONLLAMAR":18,"FUNCION":19,"METODO":20,"FUNCIONPRINTLN":21,"FUNCIONPRINT":22,"FUNCIONTYPEOF":23,"INSTRUCCIONRETURN":24,"INSTRUCCIONIFSIMPLE":25,"DECLARACIONNORMAL":26,"DECLARACIONCONSTANTE":27,"TIPODATO":28,"IDS":29,"igual":30,"EXPRESIONARITMETICA":31,"CONST":32,"id":33,"coma":34,"INT":35,"STRING":36,"BOOLEAN":37,"DOUBLE":38,"CHAR":39,"IGUALACIONDEDATO":40,"entero":41,"cadena":42,"booleano":43,"decimal":44,"caracter":45,"null":46,"IF":47,"parentesisA":48,"EXPRESIONLOGICA":49,"parentesisC":50,"VARIOSIF":51,"SENTENCIAELSEIF":52,"ELSE":53,"llaveA":54,"llaveC":55,"SENTENCIAELSEIFSIMPLE":56,"SWITCH":57,"CASOS":58,"CASO":59,"CASE":60,"dosPuntos":61,"DEFAULT":62,"FOR":63,"VARIABLEFOR":64,"EXPRESIONESRELACIONALES":65,"INCREMENTODECREMENTOFOR":66,"SUMA":67,"RESTA":68,"MULTIPLICACION":69,"DIVISION":70,"MODULO":71,"POTENCIA":72,"EXPRESIONLLAMAR":73,"mayorQue":74,"mayorIgual":75,"menorQue":76,"menorIgual":77,"igualDoble":78,"diferenteDe":79,"OR":80,"AND":81,"XOR":82,"FORINCREMENTODECREMENTO":83,"incremento":84,"decremento":85,"SUMARESTA":86,"WHILE":87,"DO":88,"VOID":89,"PARAMETROS":90,"PARAMETRO":91,"PARAMETROSCALL":92,"CALL":93,"RETORNO":94,"PRINTLN":95,"PRINT":96,"TYPEOF":97,"TYPEOFEXPRE":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptComa",16:"BREAK",17:"CONTINUE",30:"igual",32:"CONST",33:"id",34:"coma",35:"INT",36:"STRING",37:"BOOLEAN",38:"DOUBLE",39:"CHAR",41:"entero",42:"cadena",43:"booleano",44:"decimal",45:"caracter",46:"null",47:"IF",48:"parentesisA",50:"parentesisC",53:"ELSE",54:"llaveA",55:"llaveC",57:"SWITCH",60:"CASE",61:"dosPuntos",62:"DEFAULT",63:"FOR",67:"SUMA",68:"RESTA",69:"MULTIPLICACION",70:"DIVISION",71:"MODULO",72:"POTENCIA",74:"mayorQue",75:"mayorIgual",76:"menorQue",77:"menorIgual",78:"igualDoble",79:"diferenteDe",80:"OR",81:"AND",82:"XOR",84:"incremento",85:"decremento",87:"WHILE",88:"DO",89:"VOID",93:"CALL",94:"RETORNO",95:"PRINTLN",96:"PRINT",97:"TYPEOF"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[7,1],[7,1],[26,4],[27,2],[9,3],[29,3],[29,1],[28,1],[28,1],[28,1],[28,1],[28,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[11,5],[52,9],[52,5],[52,0],[56,8],[56,4],[56,0],[51,4],[51,3],[12,7],[58,2],[58,1],[59,4],[59,3],[13,10],[64,2],[64,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,1],[49,3],[49,3],[49,3],[49,1],[66,1],[66,1],[10,2],[10,2],[83,3],[86,3],[86,3],[86,1],[86,1],[15,7],[14,5],[20,8],[90,3],[90,1],[90,0],[91,2],[19,8],[92,3],[92,1],[92,0],[18,5],[73,4],[24,1],[24,2],[21,4],[22,4],[23,4],[98,1],[98,1],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("termine el an√°lisis");
break;
case 31:
console.log($$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 33:
console.log($$[$0-2] + " " + $$[$0-1] + " " + $$[$0] )
break;
case 34:
 $$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 35:
this.$ = [$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{1:[3]},{5:[1,42],6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($Vk,[2,3]),{8:[1,44]},{8:[1,45]},{8:[1,46]},o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vk,[2,15]),o($Vk,[2,16]),{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[2,29]},{8:[2,30]},{30:$Vl,84:$Vm,85:$Vn},{48:[1,57]},{48:[1,58]},{48:[1,59]},{54:[1,60]},{48:[1,61]},{33:[1,62]},{29:64,33:[1,63]},{33:[1,65]},{48:[1,66]},{48:[1,67]},{48:[1,68]},{8:[2,107],23:73,31:69,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{26:80,28:81,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{33:[2,36]},{33:[2,37]},{33:[2,38]},{33:[2,39]},{33:[2,40]},{1:[2,1]},o($Vk,[2,2]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{23:73,31:82,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},o($Vv,[2,87]),o($Vv,[2,88]),{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:83,65:84,73:72,97:$Vj},{33:[1,86]},{7:88,9:89,26:21,27:22,28:81,32:$V2,33:[1,90],35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,64:87},{4:91,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:92,65:84,73:72,97:$Vj},{48:[1,93]},o($Vw,$Vx,{48:[1,94]}),{30:[1,95],34:[1,96]},{48:[1,97]},{23:73,31:98,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:99,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{33:[1,101],40:102,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:103,98:100},{8:[2,108],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD},o($VE,[2,70],{48:$VF}),o($VE,[2,71]),o($VE,[2,72]),o($VE,[2,73]),o($VG,[2,41]),o($VG,[2,42]),o($VG,[2,43]),o($VG,[2,44]),o($VG,[2,45]),o($VG,[2,46]),{8:[2,32]},{29:64,33:[1,111]},{8:[2,33],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD},{50:[1,112],80:$VH,81:$VI,82:$VJ},o($VK,[2,84],{74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ}),o([8,50,74,75,76,77,78,79,80,81,82],[2,80],{67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD}),{50:[1,122]},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:123,73:72,97:$Vj},{8:[1,124]},{8:[1,125]},{30:$Vl},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,126],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{50:[1,127],80:$VH,81:$VI,82:$VJ},o($VR,$VS,{92:128,40:129,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu}),o($VR,$VT,{90:130,91:131,28:132,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8}),{23:73,31:133,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{33:[1,134]},o($VR,$VT,{91:131,28:132,90:135,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8}),{50:[1,136],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD},{50:[1,137],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD},{50:[1,138]},{48:$VF,50:[2,112]},{50:[2,113]},{50:[2,114]},{23:73,31:139,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:140,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:141,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:142,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:143,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},{23:73,31:144,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,73:72,97:$Vj},o($VR,$VS,{40:129,92:145,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu}),o($Vw,$Vx),{7:149,9:150,10:151,18:152,21:153,22:154,23:155,24:156,25:148,26:21,27:22,28:81,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,51:146,54:[1,147],93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:157,65:84,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:158,65:84,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:159,65:84,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:160,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:161,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:162,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:163,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:164,73:72,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,65:165,73:72,97:$Vj},{54:[1,166]},{8:[1,167],74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ},o($VU,[2,62]),o($VU,[2,63]),{15:168,87:$Vc},{54:[1,169]},{34:$VV,50:[1,170]},o($VR,[2,103]),{34:$VW,50:[1,172]},o($VR,[2,98]),{33:[1,174]},{8:[2,31],67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD},o($Vw,[2,34]),{34:$VW,50:[1,175]},{8:[2,109]},{8:[2,110]},o($VE,[2,111]),o($VX,[2,64],{69:$VA,70:$VB,71:$VC,72:$VD}),o($VX,[2,65],{69:$VA,70:$VB,71:$VC,72:$VD}),o($VY,[2,66],{72:$VD}),o($VY,[2,67],{72:$VD}),o($VY,[2,68],{72:$VD}),o($VE,[2,69]),{34:$VV,50:[1,176]},o($Vk,[2,47]),{4:177,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{8:[1,178]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{8:[2,26]},{8:[2,27]},{8:[2,28]},o([50,80],[2,81],{81:$VI,82:$VJ}),o([50,80,81],[2,82],{82:$VJ}),o($VK,[2,83]),o($VZ,[2,74]),o($VZ,[2,75]),o($VZ,[2,76]),o($VZ,[2,77]),o($VZ,[2,78]),o($VZ,[2,79]),{58:179,59:180,60:$V_,62:$V$},{10:184,33:[1,186],66:183,83:185},o($Vk,[2,95]),{4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{8:[2,105]},{40:188,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu},{54:[1,189]},{28:132,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,91:190},o($VR,[2,100]),{54:[1,191]},o($VE,[2,106]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,192],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($V01,[2,53],{56:193}),{55:[1,194],59:195,60:$V_,62:$V$},o($V11,[2,58]),{40:196,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu},{61:[1,197]},{50:[1,198]},{50:[2,85]},{50:[2,86]},{30:[1,199],84:$Vm,85:$Vn},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,200],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VR,[2,102]),{4:201,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($VR,[2,97]),{4:202,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($V01,[2,50],{52:203}),o($Vk,[2,55],{53:[1,204]}),o($Vk,[2,56]),o($V11,[2,57]),{61:[1,205]},{4:206,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{54:[1,207]},{33:$V21,40:210,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,86:208},o($Vk,[2,94]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,211],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,212],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($Vk,[2,54],{53:[1,213]}),{7:149,9:150,10:151,18:152,21:153,22:154,23:155,24:156,25:215,26:21,27:22,28:81,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:[1,214],93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($V11,[2,60],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,6:43,16:$V0,17:$V1,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj}),{4:217,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{50:[2,89]},{50:[2,92],67:[1,218],68:[1,219]},{50:[2,93]},o($Vk,[2,101]),o($Vk,[2,96]),{47:[1,220],54:[1,221]},{48:[1,222]},{8:[1,223]},o($V11,[2,59],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,6:43,16:$V0,17:$V1,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj}),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,224],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{33:$V21,40:210,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,86:225},{33:$V21,40:210,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,86:226},{48:[1,227]},{4:228,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:229,65:84,73:72,97:$Vj},o($V01,[2,52]),o($Vk,[2,61]),{50:[2,90]},{50:[2,91]},{23:73,31:85,33:$Vo,40:71,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,49:230,65:84,73:72,97:$Vj},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,231],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{50:[1,232],80:$VH,81:$VI,82:$VJ},{50:[1,233],80:$VH,81:$VI,82:$VJ},o($V01,[2,49]),{7:149,9:150,10:151,18:152,21:153,22:154,23:155,24:156,25:234,26:21,27:22,28:81,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},{54:[1,235]},{8:[1,236]},{4:237,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($V01,[2,51]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V0,17:$V1,18:14,19:15,20:16,21:17,22:18,23:19,24:20,26:21,27:22,28:30,32:$V2,33:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,47:$V9,55:[1,238],57:$Va,63:$Vb,87:$Vc,88:$Vd,89:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj},o($V01,[2,48])],
defaultActions: {21:[2,29],22:[2,30],37:[2,36],38:[2,37],39:[2,38],40:[2,39],41:[2,40],42:[2,1],80:[2,32],102:[2,113],103:[2,114],136:[2,109],137:[2,110],149:[2,21],150:[2,22],151:[2,23],152:[2,24],153:[2,25],154:[2,26],155:[2,27],156:[2,28],170:[2,105],184:[2,85],185:[2,86],208:[2,89],210:[2,93],225:[2,90],226:[2,91]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                        console.log("Comentario una l√≠nea");
                                    
break;
case 2:
                                        console.log("Comentario multi");
                                    
break;
case 3:
                                        return 42;
                                    
break;
case 4:
                                        return 45;
                                    
break;
case 5:
                                        return 44;
                                    
break;
case 6:
                                        return 41;
                                    
break;
case 7:
                                        return 43;
                                    
break;
case 8:
                                        return 35;
                                    
break;
case 9:
                                        return 36;
                                    
break;
case 10:
                                        return 37;
                                    
break;
case 11:
                                        return 38;
                                    
break;
case 12:
                                        return 39;
                                    
break;
case 13:
                                        return 32;
                                    
break;
case 14:
                                        return 47;
                                    
break;
case 15:
                                        return 53;
                                    
break;
case 16:
                                        return 57;
                                    
break;
case 17:
                                        return 60;
                                    
break;
case 18:
                                        return 62;
                                    
break;
case 19:
                                        return 16;
                                    
break;
case 20:
                                        return 63;
                                    
break;
case 21:
                                        return 88;
                                    
break;
case 22:
                                        return 87;
                                    
break;
case 23:
                                        return 17;
                                    
break;
case 24:
                                        return 89;
                                    
break;
case 25:
                                        return 93;
                                    
break;
case 26:
                                        return 46;
                                    
break;
case 27:
                                        return 94;
                                    
break;
case 28:
                                        return 95;
                                    
break;
case 29:
                                        return 96;
                                    
break;
case 30:
                                        return 97;
                                    
break;
case 31:
                                        return 33;
                                    
break;
case 32:
                                        return 'comillaDoble'
                                    
break;
case 33:
                                        return 'barraInvertida'
                                    
break;
case 34:
                                        return 'saltoLinea'
                                    
break;
case 35:
                                        return 'retornoCarro'
                                    
break;
case 36:
                                        return 'tabulacion'
                                    
break;
case 37:
                                        return 78
                                    
break;
case 38:
                                        return 30
                                    
break;
case 39:
                                        return 79
                                    
break;
case 40:
                                        return 76
                                    
break;
case 41:
                                        return 74
                                    
break;
case 42:
                                        return 77
                                    
break;
case 43:
                                        return 75
                                    
break;
case 44:
                                        return 'interrogacionCierra'
                                    
break;
case 45:
                                        return 61
                                    
break;
case 46:
                                        return 'NOT'
                                    
break;
case 47:
                                        return 80
                                    
break;
case 48:
                                        return 81
                                    
break;
case 49:
                                        return 82
                                    
break;
case 50:
                                        return 48
                                    
break;
case 51:
                                        return 50
                                    
break;
case 52:
                                        return 8
                                    
break;
case 53:
                                        return 34
                                    
break;
case 54:
                                        return 84
                                    
break;
case 55:
                                        return 85
                                    
break;
case 56:
                                        return 67
                                    
break;
case 57:
                                        return 68
                                    
break;
case 58:
                                        return 70
                                    
break;
case 59:
                                        return 69
                                    
break;
case 60:
                                        return 71
                                    
break;
case 61:
                                        return 72
                                    
break;
case 62:
                                        return 54
                                    
break;
case 63:
                                        return 55
                                    
break;
case 64:
                                        return 'corcheteA'
                                    
break;
case 65:
                                        return 'corcheteC'
                                    
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:
                                        let aux = new moduloErrores.ErrorCST("L√©xico", "La expresi√≥n " + yy_.yytext + " no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column);
                                        errores.push(aux);
                                        console.log("Error l√©xico");
                                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:\*\*)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}